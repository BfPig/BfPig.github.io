<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>重学前端03-JavaScript类型：关于类型，有哪些你不知道的细节？</title>
      <link href="/2019/06/01/2019-06-01-%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF03/"/>
      <url>/2019/06/01/2019-06-01-%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF03/</url>
      
        <content type="html"><![CDATA[<h1 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h1><ul><li>为什么有的编程规范要求用 void 0 代替 undefined？</li><li>字符串有最大长度吗？</li><li>JS里为什么0.1+0.2不等于0.3</li><li>ES6新加入的Symbol是什么</li><li>为什么给对象添加的方法基本都能用在类型上？</li></ul><p>运行时类型是代码实际执行过程中我们用到的类型。所有的类型数据都会属于 7 个类型之一。从变量、参数、返回值到表达式中间结果，任何 JavaScript 代码运行过程中产生的数据，都具有运行时类型<br><a id="more"></a></p><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><p>JavaScript 语言的每一个值都属于某一种数据类型。JavaScript 语言规定了 7 种语言类型。语言类型广泛用于变量、函数参数、表达式、函数返回值等场合。根据最新的语言标准，这 7 种语言类型是：</p><p>1.Undefined<br>2.Null<br>3.Boolean<br>4.String<br>5.Number<br>6.Symbol<br>7.Object</p><h2 id="Undefined、Null"><a href="#Undefined、Null" class="headerlink" title="Undefined、Null"></a>Undefined、Null</h2><p>Undefined:未定义，undefined是变量，可以被修改<br>Null:定义了但是为空，null是关键字</p><p><code>void 运算符 对给定的表达式进行求值，然后返回 undefined。</code></p><p>规范中使用 <code>void 0</code> 代替 <code>undefined</code>原因是undefined是变量，可以被修改，而<code>void 0</code>返回的绝对是undefined。</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>String有最大长度是2^53-1，这个长度并不是字符数。</p><p>String的意义并非是”字符串“，而是字符串的UTF16编码，所以，字符串的最大长度，实际上是受字符串的编码长度影响的。</p><pre><code>Note：现行的字符集国际标准，字符是以 Unicode 的方式表示的，每一个 Unicode 的码点表示一个字符，理论上，Unicode 的范围是无限的。UTF 是 Unicode 的编码方式，规定了码点在计算机中的表示方法，常见的有 UTF16 和 UTF8。 Unicode 的码点通常用 U+??? 来表示，其中 ??? 是十六进制的码点值。 0-65536（U+0000 - U+FFFF）的码点被称为基本字符区域（BMP）。</code></pre><p>JavaScript 中的字符串是永远无法变更的，一旦字符串构造出来，无法用任何方式改变字符串的内容，所以字符串具有值类型的特征。</p><p>JavaScript 字符串把每个 UTF16 单元当作一个字符来处理，所以处理非 BMP（超出 U+0000 - U+FFFF 范围）的字符时，你应该格外小心。</p><p>JavaScript 这个设计继承自 Java，最新标准中是这样解释的，这样设计是为了“性能和尽可能实现起来简单”。因为现实中很少用到 BMP 之外的字符。</p><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>JavaScript 中的 Number 类型有 18437736874454810627(即 2^64-2^53+3) 个值。</p><p>JavaScript 中的 Number 类型基本符合 IEEE 754-2008 规定的双精度浮点数规则，但是 JavaScript 为了表达几个额外的语言场景（比如不让除以 0 出错，而引入了无穷大的概念），规定了几个例外情况：</p><ul><li><a href="https://kinboyw.github.io/2018/11/13/%E7%A5%9E%E5%A5%87%E7%9A%84NaN/" target="_blank" rel="noopener">NaN</a></li><li>Infinity，无穷大；</li><li>-Infinity，负无穷大。</li></ul><p>JavaScript 中有 +0 和 -0，在加法类运算中它们没有区别，但是除法的场合则需要特别留意区分，“忘记检测除以 -0，而得到负无穷大”的情况经常会导致错误，而区分 +0 和 -0 的方式，正是检测 1/x 是 Infinity 还是 -Infinity。</p><p>根据双精度浮点数的定义，Number 类型中有效的整数范围是 -0x1fffffffffffff 至 0x1fffffffffffff，所以 Number 无法精确表示此范围外的整数。</p><p>同样根据浮点数的定义，非整数的 Number 类型无法用 ==（=== 也不行） 来比较，一段著名的代码，这也正是我们第三题的问题，为什么在 JavaScript 中，0.1+0.2 不能 =0.3：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>);</span><br></pre></td></tr></table></figure><p>这里输出的结果是 false，说明两边不相等的，这是浮点运算的特点，也是很多同学疑惑的来源，浮点数运算的精度问题导致等式左右的结果并不是严格相等，而是相差了个微小的值。<br>所以实际上，这里错误的不是结论，而是比较的方法，正确的比较方法是使用 JavaScript 提供的最小精度值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Math</span>.abs(<span class="number">0.1</span> + <span class="number">0.2</span> - <span class="number">0.3</span>) &lt;= <span class="built_in">Number</span>.EPSILON);</span><br></pre></td></tr></table></figure><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>定义：Symbol 是 ES6 中引入的新类型，它是一切非字符串的对象 key 的集合，在 ES6 规范中，整个对象系统被用 Symbol 重塑。</p><p>…………</p><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 重学前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学前端02-前端知识结构图</title>
      <link href="/2019/06/01/2019-06-01-%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF02/"/>
      <url>/2019/06/01/2019-06-01-%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF02/</url>
      
        <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>打造一个前端知识的框架，再把知识点做个遍历，这其中，有原理和背景的部分，我去讲解知识的原理和背景。如果没有的话，我们就去讲整理和记忆这部分知识的方法，这样，即使你遇见无法一下子记住的知识，也可以很容易地查阅参考手册和标准来解决。</p><a id="more"></a><h1 id="导图"><a href="#导图" class="headerlink" title="导图"></a>导图</h1><blockquote class="pullquote mindmap mindmap-md"><ul><li>重学前端<ul><li>JavaScript<ul><li>运行时<ul><li>数据结构<ul><li>类型(7种基本类型和7种语言类型)<ul><li>对象(历史、设计思路)</li></ul></li><li>实例(内置对象)<ul><li>应用机制</li></ul></li></ul></li><li>执行过程(算法)<ul><li>事件循环</li><li>微任务执行</li><li>函数执行</li><li>语句级执行</li></ul></li></ul></li><li>文法<ul><li>词法</li><li>语法</li></ul></li><li>语义</li></ul></li><li>HTML/CSS<ul><li>HTML<ul><li>元素<ul><li>文档元信息</li><li>语义相关内容</li><li>链接</li><li>替换型元素</li><li>表单</li><li>表格</li><li>总集</li></ul></li><li>语言<ul><li>实体</li><li>命名空间</li></ul></li><li>补充标准</li></ul></li><li>CSS<ul><li>语言<ul><li>@rule</li><li>选择器</li><li>单位</li></ul></li><li>功能<ul><li>布局<ul><li>正常</li><li>弹性</li></ul></li><li>绘制<ul><li>颜色和形状</li><li>文字相关</li></ul></li><li>交互<ul><li>动画</li><li>其他交互</li></ul></li></ul></li></ul></li></ul></li><li>浏览器的实现原理和API<ul><li>实现原理<ul><li>解析</li><li>构建DOM树</li><li>计算CSS</li><li>渲染、合成和绘制</li></ul></li><li>API<ul><li>DOM</li><li>CSSOM</li><li>事件</li><li>API总集合</li></ul></li></ul></li><li>前端工程实践<ul><li>性能</li><li>工具链</li><li>持续集成</li><li>搭建系统</li><li>架构于基础库    </li></ul></li></ul></li></ul></blockquote><h2 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML/CSS"></a>HTML/CSS</h2><ul><li>文档元信息：通常是出现在 head 标签中的元素，包含了描述文档自身的一些信息；</li><li>语义相关：扩展了纯文本，表达文章结构、不同语言要素的标签；</li><li>链接：提供到文档内和文档外的链接；</li><li>替换型标签：引入声音、图片、视频等外部元素替换自身的一类标签；</li><li>表单：用于填写和提交信息的一类标签；</li><li>表格：表头、表尾、单元格等表格的结构。</li></ul><p>标记语言跟编程语言不太一样，没有编程语言那么严谨，所以，要了解HTML的语法和几个重要的语言机制：实体、命名空间。<br>HTML的补充标准：ARIA，它是 HTML 的扩展，在可访问性领域，它有至关重要的作用。</p><h2 id="前端工程实践"><a href="#前端工程实践" class="headerlink" title="前端工程实践"></a>前端工程实践</h2><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>对任何一个前端团队而言，性能是它价值的核心指标，从早年“重构”的实践开始，前端有通过性能证明自己价值的传统。<br>角度：团队</p><h3 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h3><p>企业中工具链的建设思路。<br>对一个高效又合作良好的前端团队来说，一致性的工具链是不可或缺的保障，作为开发阶段的入口，工具链又可以和性能、发布、持续集成等系统链接到一起，成为团队技术管理的基础。</p><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p>过去持续集成概念和理论都主要针对软件开发，而对前端来说，持续集成是一个新的课题（当然对持续集成来说，前端也是一个新课题），比如 daily build 就完全不适用前端，前端代码必须是线上实时可用的。</p><p>针对前端的持续集成提出一些建设的思路。</p><h3 id="搭建系统"><a href="#搭建系统" class="headerlink" title="搭建系统"></a>搭建系统</h3><ul><li>什么是搭建系统</li><li>常见的搭建系统类型。</li></ul><h3 id="架构与基础库"><a href="#架构与基础库" class="headerlink" title="架构与基础库"></a>架构与基础库</h3><p>软件架构师主要解决功能复杂性的问题，服务端架构师主要解决高流量问题，而前端是页面间天然解耦，分散在用户端运行的系统，但是前端架构也有自己要解决的问题。<br>前端需求量大、专业人才稀缺，更因为前端本身运行在浏览器中，有大量兼容工作要做。所以前端架构的主要职责是兼容性、复用和能力扩展。<br>思路和切入点。</p>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 重学前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学前端01-明确前端学习路线与方法</title>
      <link href="/2019/06/01/2019-06-01-%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF01/"/>
      <url>/2019/06/01/2019-06-01-%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF01/</url>
      
        <content type="html"><![CDATA[<h1 id="零散学习造成的问题"><a href="#零散学习造成的问题" class="headerlink" title="零散学习造成的问题"></a>零散学习造成的问题</h1><ul><li><strong>首先是前端的基础知识</strong>，常常有一些工作多年的工程师，在看到一些我认为很基础的 JavaScript 语法的时候，还会惊呼“居然可以这样”。是的，基础知识的欠缺会让你束手束脚，更限制你解决问题的思路。</li><li><strong>其次，技术上存在短板，就会导致前端开发者的上升通道不甚顺畅</strong>。特别是一些小公司的程序员，只能靠自己摸索，这样就很容易陷入重复性劳动的陷阱，最终耽误自己的职业发展。</li><li>除此之外，前端工程师也会面临<strong>技术发展问题带来的挑战</strong>。前端社区高度活跃，前端标准也在快速更新，这样蓬勃发展对技术来说无疑是好事，但是副作用也显而易见，它使得前端工程师的学习压力变得很大。</li></ul><h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>把前端技术背后的设计原理和知识体系讲清楚，让你能对前端技术产生整体认知，这样才能够在未来汹涌而来的新技术中保持领先的状态。</p><h1 id="学习路径与方法"><a href="#学习路径与方法" class="headerlink" title="学习路径与方法"></a>学习路径与方法</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>带你摸索出适合自己的前端学习方法；</li><li>帮助你建立起前端技术的知识架构；</li><li>让你理解前端技术背后的核心思想。</li></ul><h2 id="两个学习方法"><a href="#两个学习方法" class="headerlink" title="两个学习方法"></a>两个学习方法</h2><h3 id="建立知识架构"><a href="#建立知识架构" class="headerlink" title="建立知识架构"></a>建立知识架构</h3><p>类型转换、this指针、闭包这样的知识点之间没有任何逻辑关系。它们既不是并列关系，又不是递进关系，合在一起，也就没有任何意义。这样的知识架构，无法帮助我们去发现问题和理解问题。</p><p>对于任何计算机语言来说，必定是“用规定的文法，去表达特定语义，最终操作运行时的”一个过程。文法可以分成词法和语法，这来自编译原理的划分，同样是完备的。语义则跟语法具有一一对应关系。</p><p>程序 = 算法 + 数据结构，那么，对运行时来说，类型就是数据结构，执行过程就是算法。</p><ul><li>文法<ul><li>词法</li><li>语法</li></ul></li><li>语义</li><li>运行时<ul><li>类型</li><li>执行过程</li></ul></li></ul><h3 id="追本溯源"><a href="#追本溯源" class="headerlink" title="追本溯源"></a>追本溯源</h3><p>追本溯源，其实就是关注技术提出的背景，关注原始的论文或者文章，关注作者说的话。<br>操作起来也非常简单：翻翻资料（一般 wiki 上就有）找找历史上的文章和人物，再顺藤摸瓜翻出来历史资料就可以了，如果翻出来的是历史人物（幸亏互联网的历史不算悠久），你也可以试着发封邮件问问。</p>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 重学前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学前端00-重新理解前端</title>
      <link href="/2019/06/01/2019-06-01-%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF00/"/>
      <url>/2019/06/01/2019-06-01-%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF00/</url>
      
        <content type="html"><![CDATA[<h1 id="前端发展历史"><a href="#前端发展历史" class="headerlink" title="前端发展历史"></a>前端发展历史</h1><ul><li>前端的史前记忆：“青铜时代”</li><li>进入发展期的前端：“白银时代”</li><li>从前端到“全端”：“黄金时代”</li></ul><h1 id="前端痛点：散点自学，基础不牢"><a href="#前端痛点：散点自学，基础不牢" class="headerlink" title="前端痛点：散点自学，基础不牢"></a>前端痛点：散点自学，基础不牢</h1><p>表面上看他们可能是一时忘记了，或者之前没注意，但实际上是他们对于前端的知识体系和底层原理没有真正系统地理解。</p><h2 id="前端成长的两个视角"><a href="#前端成长的两个视角" class="headerlink" title="前端成长的两个视角"></a>前端成长的两个视角</h2><ul><li>立足标准，系统性总结和整理前端知识，建立自己的认知和方法论</li><li>放眼团队，从业务和工程角度思考前端团队的价值和发展需要</li></ul><p>前端工程师也是开发工程师的一员，除了前端自身的领域知识和工程特点外，你还需要了解程序员通用的编程能力和架构能力。</p><h1 id="课程知识点总览"><a href="#课程知识点总览" class="headerlink" title="课程知识点总览"></a>课程知识点总览</h1><ul><li>JavaScript</li><li>CSS和HTML</li><li>浏览器实践</li><li>前端综合应用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 重学前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu java7 升级到 java8</title>
      <link href="/2019/05/29/2019-05-29-ubuntu_java7to8/"/>
      <url>/2019/05/29/2019-05-29-ubuntu_java7to8/</url>
      
        <content type="html"><![CDATA[<h1 id="查看原版本"><a href="#查看原版本" class="headerlink" title="查看原版本"></a>查看原版本</h1><p><code>java -version</code></p><p>显示如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version <span class="string">"1.7.0_101"</span></span><br><span class="line">OpenJDK Runtime Environment (IcedTea 2.6.6) (7u101-2.6.6-0ubuntu0.14.04.1)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 24.95-b01, mixed mode)</span><br></pre></td></tr></table></figure><h1 id="安装-opensdk-8"><a href="#安装-opensdk-8" class="headerlink" title="安装 opensdk 8"></a>安装 opensdk 8</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add-apt-repository ppa:openjdk-r/ppa</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure><h1 id="列出已经安装的Java版本"><a href="#列出已经安装的Java版本" class="headerlink" title="列出已经安装的Java版本"></a>列出已经安装的Java版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-java-alternatives -l</span><br></pre></td></tr></table></figure><p>显示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java-1.7.0-openjdk-amd64 1071 /usr/lib/jvm/java-1.7.0-openjdk-amd64</span><br><span class="line">java-1.8.0-openjdk-amd64 1069 /usr/lib/jvm/java-1.8.0-openjdk-amd64</span><br></pre></td></tr></table></figure><h1 id="手动切换版本"><a href="#手动切换版本" class="headerlink" title="手动切换版本"></a>手动切换版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives --config java</span><br></pre></td></tr></table></figure><p>选择java-8-openjdk-amd64即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">There are 2 choices <span class="keyword">for</span> the alternative java (providing /usr/bin/java).</span><br><span class="line"></span><br><span class="line">  Selection    Path                                            Priority   Status</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">  0            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1071      auto mode</span><br><span class="line">  1            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1071      manual mode</span><br><span class="line">* 2            /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java   1069      manual mode</span><br><span class="line"></span><br><span class="line">Press enter to keep the current choice[*], or <span class="built_in">type</span> selection number: 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx/Tengine服务器安装SSL证书</title>
      <link href="/2019/05/29/2019-05-29-nginx+TengineToSSL/"/>
      <url>/2019/05/29/2019-05-29-nginx+TengineToSSL/</url>
      
        <content type="html"><![CDATA[<p>在证书控制台下载Nginx版本证书。下载到本地的压缩文件包解压后包含：</p><ul><li>.crt文件：是证书文件，crt是pem文件的扩展名。</li><li>.key文件：证书的私钥文件（申请证书时如果没有选择自动创建CSR，则没有该文件）。<br>友情提示： .pem扩展名的证书文件采用Base64-encoded的PEM格式文本文件，可根据需要修改扩展名。</li></ul><p>以Nginx标准配置为例，假如证书文件名是a.pem，私钥文件是a.key。</p><p>1.在Nginx的安装目录下创建cert目录，并且将下载的全部文件拷贝到cert目录中。如果申请证书时是自己创建的CSR文件，请将对应的私钥文件放到cert目录下并且命名为a.key；</p><p>2.打开 Nginx 安装目录下 conf 目录中的 nginx.conf 文件，找到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HTTPS server</span></span><br><span class="line"><span class="comment"># #server &#123;</span></span><br><span class="line"><span class="comment"># listen 443;</span></span><br><span class="line"><span class="comment"># server_name localhost;</span></span><br><span class="line"><span class="comment"># ssl on;</span></span><br><span class="line"><span class="comment"># ssl_certificate cert.pem;</span></span><br><span class="line"><span class="comment"># ssl_certificate_key cert.key;</span></span><br><span class="line"><span class="comment"># ssl_session_timeout 5m;</span></span><br><span class="line"><span class="comment"># ssl_protocols SSLv2 SSLv3 TLSv1;</span></span><br><span class="line"><span class="comment"># ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span></span><br><span class="line"><span class="comment"># ssl_prefer_server_ciphers on;</span></span><br><span class="line"><span class="comment"># location / &#123;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure><p>3.将其修改为 (以下属性中ssl开头的属性与证书配置有直接关系，其它属性请结合自己的实际情况复制或调整) :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"> listen 443;</span><br><span class="line"> server_name localhost;</span><br><span class="line"> ssl on;</span><br><span class="line"> root html;</span><br><span class="line"> index index.html index.htm;</span><br><span class="line"> ssl_certificate   cert/a.pem;</span><br><span class="line"> ssl_certificate_key  cert/a.key;</span><br><span class="line"> ssl_session_timeout 5m;</span><br><span class="line"> ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"> ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"> ssl_prefer_server_ciphers on;</span><br><span class="line"> location / &#123;</span><br><span class="line">     root html;</span><br><span class="line">     index index.html index.htm;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存退出。</p><p>4.重启 Nginx。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> nginx </category>
          
          <category> tengine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
            <tag> ssl </tag>
            
            <tag> https </tag>
            
            <tag> tengine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx80端口转发到443端口</title>
      <link href="/2019/05/29/2019-05-29-nginx80to443/"/>
      <url>/2019/05/29/2019-05-29-nginx80to443/</url>
      
        <content type="html"><![CDATA[<p>在conf配置上添加一个80的server，将其转发即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.域名.com;</span><br><span class="line">    rewrite ^(.*)$ https://<span class="variable">$&#123;server_name&#125;</span><span class="variable">$1</span> permanent; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
            <tag> ssl </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置终端代理</title>
      <link href="/2019/05/29/2019-05-29-%E9%85%8D%E7%BD%AE%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/"/>
      <url>/2019/05/29/2019-05-29-%E9%85%8D%E7%BD%AE%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>可以直接在<code>~/.bash_profile</code>, <code>~/.zshrc</code>, <code>~/.profile</code>, or <code>~/.bashrc</code>中添加一个函数进去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启代理</span></span><br><span class="line"><span class="function"><span class="title">proxy</span></span> () &#123;</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:10086</span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:10001</span><br><span class="line"><span class="built_in">export</span> all_proxy=socks5://127.0.0.1:10010</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Proxy on"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭代理</span></span><br><span class="line"><span class="function"><span class="title">unproxy</span></span> () &#123;</span><br><span class="line"><span class="built_in">export</span> https_proxy</span><br><span class="line"><span class="built_in">export</span> http_proxy</span><br><span class="line"><span class="built_in">export</span> all_proxy</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Proxy off"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后执行<code>source ~/.zshrc</code>(对应自己的startup files文件)。</p><p>需要开启代理的时候就执行<code>proxy</code>，关闭就执行<code>unproxy</code>。<br><blockquote class="pullquote mindmap mindmap-md"><ul><li>重学前端<ul><li>JavaScript<ul><li>运行时<ul><li>数据结构<ul><li>类型(7种基本类型和7种语言类型)<ul><li>对象(历史、设计思路)</li></ul></li><li>实例(内置对象)<ul><li>应用机制</li></ul></li></ul></li><li>执行过程(算法)<ul><li>事件循环</li><li>微任务执行</li><li>函数执行</li><li>语句级执行</li></ul></li></ul></li><li>文法<ul><li>词法</li><li>语法</li></ul></li><li>语义</li></ul></li><li>HTML/CSS<ul><li>HTML<ul><li>元素<ul><li>文档元信息</li><li>语义相关内容</li><li>链接</li><li>替换型元素</li><li>表单</li><li>表格</li><li>总集</li></ul></li><li>语言<ul><li>实体</li><li>命名空间</li></ul></li><li>补充标准</li></ul></li><li>CSS<ul><li>语言<ul><li>@rule</li><li>选择器</li><li>单位</li></ul></li><li>功能<ul><li>布局<ul><li>正常</li><li>弹性</li></ul></li><li>绘制<ul><li>颜色和形状</li><li>文字相关</li></ul></li><li>交互<ul><li>动画</li><li>其他交互</li></ul></li></ul></li></ul></li></ul></li><li>浏览器的实现原理和API<ul><li>实现原理<ul><li>解析</li><li>构建DOM树</li><li>计算CSS</li><li>渲染、合成和绘制</li></ul></li><li>API<ul><li>DOM</li><li>CSSOM</li><li>事件</li><li>API总集合</li></ul></li></ul></li><li>前端工程实践<ul><li>性能</li><li>工具链</li><li>持续集成</li><li>搭建系统</li><li>架构于基础库    </li></ul></li></ul></li></ul></blockquote></p>]]></content>
      
      
      <categories>
          
          <category> porxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> macOS </tag>
            
            <tag> porxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置多git账号</title>
      <link href="/2019/05/29/2019-05-29-%E9%85%8D%E7%BD%AE%E5%A4%9Agit%E8%B4%A6%E5%8F%B7/"/>
      <url>/2019/05/29/2019-05-29-%E9%85%8D%E7%BD%AE%E5%A4%9Agit%E8%B4%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h1><p><code>ssh-keygen -t rsa -C &quot;your email&quot;</code></p><p>可以通过命名活着放在不同的目录进行区分。</p><h1 id="添加新的SSH-keys到GitHub中"><a href="#添加新的SSH-keys到GitHub中" class="headerlink" title="添加新的SSH keys到GitHub中"></a>添加新的SSH keys到GitHub中</h1><p>将新生成的SSH keys添加到你的另一个github帐号(或者公司的gitlab)下的SSH Key中。</p><h1 id="清除git的全局设置"><a href="#清除git的全局设置" class="headerlink" title="清除git的全局设置"></a>清除git的全局设置</h1><p>如果你之前在设置本地仓库和github连接的时候设置过user.name和user.email,那么你必须首先清楚掉该设置，因为不清楚掉该设置，两个账号在提交资料的时候，验证肯定冲突（只能设置一个全局的user.name和user.email，而你现在有两个账号就对应两个不同的）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"your_name"</span></span><br><span class="line">git config --global user.email  <span class="string">"your_email"</span></span><br></pre></td></tr></table></figure><h1 id="执行ssh-agent让ssh识别新的私钥"><a href="#执行ssh-agent让ssh识别新的私钥" class="headerlink" title="执行ssh-agent让ssh识别新的私钥"></a>执行ssh-agent让ssh识别新的私钥</h1><p>分别使用<code>ssh-add</code>将其添加到ssh-agent中。</p><p><code>ssh-add ~/.ssh/id_rsa</code></p><p>如果出现<code>Could not open a connection to your authentication agent</code>的错误，可以先执行一遍<code>ssh-agent bash</code>，之后在执行<code>ssh-add</code>。</p><h1 id="配置config文件"><a href="#配置config文件" class="headerlink" title="配置config文件"></a>配置config文件</h1><p>看下<code>~/.ssh/</code>目录下有没有config，没有直接新建一个<code>touch config</code>，有的话就直接在后边添加配置。</p><p>配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个</span></span><br><span class="line"></span><br><span class="line">Host git@one.github.com</span><br><span class="line"> HostName https://github.com</span><br><span class="line"> User git</span><br><span class="line"> IdentityFile ~/.ssh/one/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个</span></span><br><span class="line"></span><br><span class="line">Host git@two.github.com</span><br><span class="line"> HostName https://github.com</span><br><span class="line"> User git</span><br><span class="line"> IdentityFile ~/.ssh/two/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># ....第N个</span></span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@one.github.com</span><br><span class="line">ssh -T git@two.github.com</span><br></pre></td></tr></table></figure><h1 id="clone-Git仓库"><a href="#clone-Git仓库" class="headerlink" title="clone Git仓库"></a>clone Git仓库</h1><p>假设原来的git ssh 地址是<code>git clone git@xxxxxx.com:xxx/test.git</code></p><p>那么新的地址就对应配置config时候不同的密钥对应的HostName，</p><p>比如是上边的one，那么，新地址就应该是<code>git clone git@one.xxxxxx.com:xxx/test.git</code></p><p>当然，如果懒得话，不改地址也是可以的，同样可以正常的操作，但是在push到仓库后，可以看见多个头像。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOs安装oh my zsh</title>
      <link href="/2019/04/23/2019-04-23-Centos%E5%AE%89%E8%A3%85oh-my-zsh/"/>
      <url>/2019/04/23/2019-04-23-Centos%E5%AE%89%E8%A3%85oh-my-zsh/</url>
      
        <content type="html"><![CDATA[<h1 id="安装zsh包"><a href="#安装zsh包" class="headerlink" title="安装zsh包"></a>安装zsh包</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zsh</span><br></pre></td></tr></table></figure><h1 id="切换默认shell为zsh"><a href="#切换默认shell为zsh" class="headerlink" title="切换默认shell为zsh"></a>切换默认shell为zsh</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h1 id="重启服务器使得配置生效"><a href="#重启服务器使得配置生效" class="headerlink" title="重启服务器使得配置生效"></a>重启服务器使得配置生效</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h1 id="安装on-my-zsh"><a href="#安装on-my-zsh" class="headerlink" title="安装on my zsh"></a>安装on my zsh</h1><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure><h1 id="修改oh-my-zsh-主题"><a href="#修改oh-my-zsh-主题" class="headerlink" title="修改oh my zsh 主题"></a>修改oh my zsh 主题</h1><p>在<code>~/.oh-my-zsh/themes</code>目录下已经列出了yum安装的主题，所以我们直接使用就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">"主题名"</span></span><br></pre></td></tr></table></figure><p>之后source即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五种开源协议的比较(BSD,Apache,GPL,LGPL,MIT)</title>
      <link href="/2019/04/04/2019-04-04-License/"/>
      <url>/2019/04/04/2019-04-04-License/</url>
      
        <content type="html"><![CDATA[<h1 id="BSD开源协议（original-BSD-license、FreeBSD-license、Original-BSD-license）"><a href="#BSD开源协议（original-BSD-license、FreeBSD-license、Original-BSD-license）" class="headerlink" title="BSD开源协议（original BSD license、FreeBSD license、Original BSD license）"></a>BSD开源协议（original BSD license、FreeBSD license、Original BSD license）</h1><p>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p><p>但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p><ul><li>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。</li><li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。</li><li>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</li></ul><p>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p><h1 id="Apache-Licence-2-0（Apache-License-Version-2-0、Apache-License-Version-1-1、Apache-License-Version-1-0）"><a href="#Apache-Licence-2-0（Apache-License-Version-2-0、Apache-License-Version-1-1、Apache-License-Version-1-0）" class="headerlink" title="Apache Licence 2.0（Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0）"></a>Apache Licence 2.0（Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0）</h1><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和BSD类似：</p><ul><li>需要给代码的用户一份Apache Licence</li><li>如果你修改了代码，需要再被修改的文件中说明。</li><li>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。</li><li>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。</li></ul><p>Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p><h1 id="GPL（GNU-General-Public-License）"><a href="#GPL（GNU-General-Public-License）" class="headerlink" title="GPL（GNU General Public License）"></a>GPL（GNU General Public License）</h1><p>我们很熟悉的Linux就是采用了GPL。GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商业软件公司开发的免费软件了。</p><p>GPL协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p><p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p><p>其它细节如再发布的时候需要伴随GPL协议等和BSD/Apache等类似。</p><h1 id="LGPL（GNU-Lesser-General-Public-License）"><a href="#LGPL（GNU-Lesser-General-Public-License）" class="headerlink" title="LGPL（GNU Lesser General Public License）"></a>LGPL（GNU Lesser General Public License）</h1><p>LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。</p><p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p><h1 id="MIT（MIT）"><a href="#MIT（MIT）" class="headerlink" title="MIT（MIT）"></a>MIT（MIT）</h1><p>MIT是和BSD一样宽范的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的.</p>]]></content>
      
      
      <categories>
          
          <category> license </category>
          
      </categories>
      
      
        <tags>
            
            <tag> license </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node项目运行ES2015</title>
      <link href="/2019/04/01/2019-04-01-node%E8%BF%90%E8%A1%8CES2015/"/>
      <url>/2019/04/01/2019-04-01-node%E8%BF%90%E8%A1%8CES2015/</url>
      
        <content type="html"><![CDATA[<h1 id="添加-babelrc"><a href="#添加-babelrc" class="headerlink" title="添加.babelrc"></a>添加.babelrc</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><ul><li>yarn</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-preset-es2015</span><br></pre></td></tr></table></figure><ul><li>npm</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-preset-es2015 --save</span><br></pre></td></tr></table></figure><h1 id="以babel-node运行"><a href="#以babel-node运行" class="headerlink" title="以babel-node运行"></a>以babel-node运行</h1><p>运行命令后边添加<code>--exec babel-node</code></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 常用命令</title>
      <link href="/2019/03/24/2019-03-24-docker-bash/"/>
      <url>/2019/03/24/2019-03-24-docker-bash/</url>
      
        <content type="html"><![CDATA[<h1 id="操作容器"><a href="#操作容器" class="headerlink" title="操作容器"></a>操作容器</h1><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><ul><li>启动容器并启动bash（交互方式）:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t &lt;image_name/continar_id&gt; /bin/bash</span><br></pre></td></tr></table></figure><ul><li>启动容器以后台方式运行(更通用的方式)：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it  image_name</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="附着到容器"><a href="#附着到容器" class="headerlink" title="附着到容器"></a>附着到容器</h2><ul><li>附着到正在运行的容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach &lt;id、container_name&gt;</span><br></pre></td></tr></table></figure><ul><li>进入正在运行的容器内部，同时运行bash(比attach更好用)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -t -i &lt;id/container_name&gt;  /bin/bash</span><br></pre></td></tr></table></figure><p>ps:可以封装一个shell脚本方便运行exec </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat indocker.sh </span><br><span class="line">docker <span class="built_in">exec</span> -t -i <span class="variable">$1</span> /bin/bash</span><br><span class="line"><span class="comment"># 查看需要附着的容器id</span></span><br><span class="line">docker ps | less -S</span><br><span class="line">CONTAINER ID        IMAGE                                                 </span><br><span class="line">9cf7b563f689        hello.demo.kdemo:v160525.202747</span><br><span class="line"></span><br><span class="line">./indocker.sh 9cf7b563f689</span><br></pre></td></tr></table></figure><h2 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h2><ul><li>查看容器日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs &lt;id/container_name&gt;</span><br></pre></td></tr></table></figure><ul><li>实时查看日志输出</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f &lt;id/container_name&gt; (类似 tail -f) (带上时间戳-t）</span><br></pre></td></tr></table></figure><h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><ul><li>列出当前所有正在运行的container</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><ul><li>用一行列出所有正在运行的container（容器多的时候非常清晰）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps | less -S</span><br></pre></td></tr></table></figure><ul><li>列出所有的container</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><ul><li>列出最近一次启动的container</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -l</span><br></pre></td></tr></table></figure><ul><li>显示一个运行的容器里面的进程信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top Name/ID</span><br></pre></td></tr></table></figure><ul><li>查看容器内部详情细节：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect &lt;id/container_name&gt;</span><br></pre></td></tr></table></figure><ul><li>在容器中安装新的程序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run image_name apt-get install -y app_name</span><br></pre></td></tr></table></figure><p>ps: 在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。</p><ul><li>从容器里面拷贝文件/目录到本地一个路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp Name:/container_path to_path  </span><br><span class="line">docker cp ID:/container_path to_path</span><br></pre></td></tr></table></figure><ul><li>保存对容器的修改（commit） 当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit ID new_image_name</span><br></pre></td></tr></table></figure><p>ps:image相当于类，container相当于实例，不过可以动态给实例安装新软件，然后把这个container用commit命令固化成一个image。</p><ul><li>删除单个容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm Name/ID</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-f, –force=false; -l, –link=false Remove the specified link and not the underlying container; -v, –volumes=false Remove the volumes associated to the container</span><br></pre></td></tr></table></figure><ul><li>删除所有容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm `docker ps -a -q`</span><br></pre></td></tr></table></figure><ul><li>停止、启动、杀死、重启一个容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop Name/ID  </span><br><span class="line">docker start Name/ID  </span><br><span class="line">docker <span class="built_in">kill</span> Name/ID  </span><br><span class="line">docker restart name/ID</span><br></pre></td></tr></table></figure><h1 id="操作Image"><a href="#操作Image" class="headerlink" title="操作Image"></a>操作Image</h1><ul><li>列出镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images</span><br></pre></td></tr></table></figure><p>-a, –all=false Show all images; –no-trunc=false Don’t truncate output; -q, –quiet=false Only show numeric IDs</p><ul><li>从dockerhub检索image</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search image_name</span><br></pre></td></tr></table></figure><ul><li>下载image</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull image_name</span><br></pre></td></tr></table></figure><ul><li>删除一个或者多个镜像;</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi image_name</span><br></pre></td></tr></table></figure><p><code>-f, –force=false Force; –no-prune=false Do not delete untagged parents</code></p><ul><li>显示一个镜像的历史;</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">history</span> image_name</span><br></pre></td></tr></table></figure><ul><li>发布docker镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push new_image_name</span><br></pre></td></tr></table></figure><p>ps:要发布到私有Registry中的镜像，在镜像命名中需要带上Registry的域名（如果非80端口，同时需要带上端口号）比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push dockerhub.yourdomain.com:443/hello.demo.kdemo:v1.0</span><br></pre></td></tr></table></figure><ul><li>拉取docker镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull image_name</span><br></pre></td></tr></table></figure><h1 id="网络操作"><a href="#网络操作" class="headerlink" title="网络操作"></a>网络操作</h1><ul><li>查看docker0的网络(宿主机上操作)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a show docker0</span><br></pre></td></tr></table></figure><ul><li>查看容器的IP地址</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f <span class="string">'&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;'</span> &lt;id、container_name&gt;</span><br></pre></td></tr></table></figure><p>附着到容器内部查看其内部ip：- </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a show eth0</span><br></pre></td></tr></table></figure><h1 id="查看docker基础信息"><a href="#查看docker基础信息" class="headerlink" title="查看docker基础信息"></a>查看docker基础信息</h1><ul><li>查看docker版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><ul><li>查看docker系统的信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译)如何使用gulp压缩CSS</title>
      <link href="/2019/01/15/2019-01-15-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gulp%E5%8E%8B%E7%BC%A9CSS/"/>
      <url>/2019/01/15/2019-01-15-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gulp%E5%8E%8B%E7%BC%A9CSS/</url>
      
        <content type="html"><![CDATA[<p><a href="https://medium.freecodecamp.org/how-to-minify-your-css-with-gulp-6ff3f4a896b5" target="_blank" rel="noopener">原文地址</a></p><p>在本文中我将展示用gulp压缩css的简单方法</p><h1 id="开始-什么是gulp"><a href="#开始-什么是gulp" class="headerlink" title="开始-什么是gulp"></a>开始-什么是gulp</h1><p>Gulp是一个javascript的自动化构建工具，他可以自动完成例如以下的任务……</p><ul><li>绑定压缩资源和样式</li><li>热加载</li><li>快速运行单元测试</li><li>Less/Sass 编译成CSS</li><li>更多</li></ul><p>gulp的工作原理流程如下：</p>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
          <category> 翻译 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端笔记 </tag>
            
            <tag> 翻译 </tag>
            
            <tag> gulp </tag>
            
            <tag> 前端工程化 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS实现单行、多行文本溢出显示省略号</title>
      <link href="/2018/12/26/2018-12-26-css_Ellipsis/"/>
      <url>/2018/12/26/2018-12-26-css_Ellipsis/</url>
      
        <content type="html"><![CDATA[<h1 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><ul><li>-webkit-line-clamp用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。常见结合属性：</li><li>display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。</li><li>-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。</li></ul><p>实现方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">position</span>: relative; <span class="attribute">line-height</span>: <span class="number">20px</span>; <span class="attribute">max-height</span>: <span class="number">40px</span>;<span class="attribute">overflow</span>: hidden;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span>&#123;<span class="attribute">content</span>: <span class="string">"..."</span>; <span class="attribute">position</span>: absolute; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">padding-left</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, transparent, #fff 55%);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(right, transparent, #fff 55%);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(right, transparent, #fff 55%);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, transparent, #fff 55%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在小程序中使用Async/Await</title>
      <link href="/2018/12/26/2018-12-26-mini_program/"/>
      <url>/2018/12/26/2018-12-26-mini_program/</url>
      
        <content type="html"><![CDATA[<p>截止2018-12-26，最先版本的小程序依旧不支持ES7的语法Async/Await</p><p>为了让小程序支持Async/Await，这里要用到一个库<a href="https://github.com/facebook/regenerator" target="_blank" rel="noopener">regenerator</a></p><p>我们最终要引用到的文件就是<code>regenerator-runtime.js</code></p><p>在utils中import </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import regeneratorRuntime from &apos;./regenerator-runtime/runtime-module&apos;</span><br></pre></td></tr></table></figure><p>正常使用Async/Await即可！</p><p>（没有抓住圣诞节的尾巴，就依旧只能提前祝自己狗狗快乐一声了）</p>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端笔记 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sublime配置ESlintAuthFix</title>
      <link href="/2018/12/17/2018-12-17-eslintauthfix/"/>
      <url>/2018/12/17/2018-12-17-eslintauthfix/</url>
      
        <content type="html"><![CDATA[<ul><li>全局安装eslint</li><li>安装ESlintAuthFix</li></ul><p>cmd + shift + p  =&gt; install pack =&gt; ESlintAuthFix</p><ul><li><p>查看eslint的位置<br>  <code>which eslint</code></p></li><li><p>配置环境变量</p><p>  <code>xport PATH=path::$PATH</code></p></li></ul><ul><li>设置ESlintAuthFix</li></ul><p>package setting =&gt; ESlintAuthFix =&gt; settingDefault</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"eslint_path"</span>: <span class="string">"path"</span>,</span><br><span class="line">  <span class="attr">"show_panel"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置快捷键</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+shift+h"</span>], <span class="attr">"command"</span>: <span class="string">"eslint_auto_fix"</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
          <category> sublime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git commit log Emoji</title>
      <link href="/2018/06/28/2018-06-28-gitemoji/"/>
      <url>/2018/06/28/2018-06-28-gitemoji/</url>
      
        <content type="html"><![CDATA[<h2 id="git-commit-中-Emoji意义"><a href="#git-commit-中-Emoji意义" class="headerlink" title="git commit 中 Emoji意义"></a>git commit 中 Emoji意义</h2><table><thead><tr><th style="text-align:center">Emoji</th><th style="text-align:left">意义</th></tr></thead><tbody><tr><td style="text-align:center">🐞</td><td style="text-align:left">解决BUG</td></tr><tr><td style="text-align:center">🎨</td><td style="text-align:left">改进代码的结构/格式</td></tr><tr><td style="text-align:center">🚀</td><td style="text-align:left">部署东西</td></tr><tr><td style="text-align:center">🔥</td><td style="text-align:left">删除代码或文件</td></tr><tr><td style="text-align:center">🔧</td><td style="text-align:left">更改配置文件</td></tr><tr><td style="text-align:center">✏️</td><td style="text-align:left">修正错别字</td></tr><tr><td style="text-align:center">💄</td><td style="text-align:left">更新UI和样式文件</td></tr><tr><td style="text-align:center">🎉</td><td style="text-align:left">初始提交</td></tr><tr><td style="text-align:center">🍏</td><td style="text-align:left">解决iOS上的某些问题</td></tr><tr><td style="text-align:center">🍎</td><td style="text-align:left">修复macOS上的某些内容</td></tr><tr><td style="text-align:center">✨</td><td style="text-align:left">介绍新功能</td></tr><tr><td style="text-align:center">🔊</td><td style="text-align:left">添加日志</td></tr><tr><td style="text-align:center">🔇</td><td style="text-align:left">删除日志</td></tr><tr><td style="text-align:center">📦</td><td style="text-align:left">更新编译的文件或包</td></tr><tr><td style="text-align:center">📱</td><td style="text-align:left">致力于响应式设计</td></tr><tr><td style="text-align:center">👽</td><td style="text-align:left">由于外部API更改而更新代码</td></tr><tr><td style="text-align:center">🤖</td><td style="text-align:left">修复Android上的某些内容</td></tr><tr><td style="text-align:center">🐧</td><td style="text-align:left">在Linux上修复某些内容</td></tr><tr><td style="text-align:center">🙈</td><td style="text-align:left">添加或更新.gitignore文件</td></tr><tr><td style="text-align:center">📸</td><td style="text-align:left">添加或更新快照</td></tr><tr><td style="text-align:center">🚸</td><td style="text-align:left">改善用户体验/可用性</td></tr><tr><td style="text-align:center">♿</td><td style="text-align:left">提高可访问性</td></tr><tr><td style="text-align:center">⬆️</td><td style="text-align:left">升级依赖关系</td></tr><tr><td style="text-align:center">⬇️</td><td style="text-align:left">降级依赖关系</td></tr><tr><td style="text-align:center">🔒</td><td style="text-align:left">解决安全问题</td></tr><tr><td style="text-align:center">✅</td><td style="text-align:left">添加测试</td></tr><tr><td style="text-align:center">🚑</td><td style="text-align:left">关键修补程序</td></tr><tr><td style="text-align:center">💡</td><td style="text-align:left">记录源代码</td></tr><tr><td style="text-align:center">📈</td><td style="text-align:left">添加分析或跟踪代码</td></tr><tr><td style="text-align:center">♻</td><td style="text-align:left">重构代码</td></tr><tr><td style="text-align:center">📌</td><td style="text-align:left">将依赖关系固定到特定版本</td></tr><tr><td style="text-align:center">🏁</td><td style="text-align:left">在Windows上修复某些内容</td></tr><tr><td style="text-align:center">🔀</td><td style="text-align:left">合并分支</td></tr><tr><td style="text-align:center">⏪</td><td style="text-align:left">恢复更改</td></tr><tr><td style="text-align:center">💩</td><td style="text-align:left">编写需要改进的错误代码</td></tr><tr><td style="text-align:center">🐳</td><td style="text-align:left">关于Docker的工作</td></tr><tr><td style="text-align:center">👷</td><td style="text-align:left">添加CI构建系统</td></tr><tr><td style="text-align:center">🌐</td><td style="text-align:left">国际化和本地化</td></tr><tr><td style="text-align:center">🚚</td><td style="text-align:left">移动或重命名文件</td></tr><tr><td style="text-align:center">➖</td><td style="text-align:left">删除依赖项</td></tr><tr><td style="text-align:center">➕</td><td style="text-align:left">添加依赖关系</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> Emoji </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chattr命令</title>
      <link href="/2018/03/10/2018-03-10-chattr/"/>
      <url>/2018/03/10/2018-03-10-chattr/</url>
      
        <content type="html"><![CDATA[<h1 id="chattr命令"><a href="#chattr命令" class="headerlink" title="chattr命令"></a>chattr命令</h1><p><strong>chattr命令</strong>：有时候你发现用root权限都不能修改某个文件，大部分原因是曾经用chattr命令锁定该文件了。chattr命令的作用很大，通过chattr命令修改属性能够提高系统的安全性，但是它并不适合所有的目录。chattr命令不能保护/、/dev、/tmp、/var目录。lsattr命令是显示chattr命令设置的文件属性。</p><blockquote><p>语法 chattr [-RV] [-+=AacDdijsSu] [-v version] 文件或目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#参数  描述</span></span><br><span class="line">－R  <span class="comment">#递归处理所有的文件及子目录。</span></span><br><span class="line">－V  <span class="comment">#详细显示修改内容，并打印输出。</span></span><br><span class="line">–   <span class="comment">#失效属性。</span></span><br><span class="line">+   <span class="comment">#激活属性。</span></span><br><span class="line">=   <span class="comment">#指定属性。</span></span><br><span class="line">A   <span class="comment">#Atime，告诉系统不要修改对这个文件的最后访问时间。</span></span><br><span class="line">S   <span class="comment">#Sync，一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘。</span></span><br><span class="line">a   <span class="comment">#Append Only，系统只允许在这个文件之后追加数据，不允许任何进程覆盖或截断这个文件。如果目录具有这个属性，系统将只允许在这个目录下建立和修改文件，而不允许删除任何文件。</span></span><br><span class="line">i   <span class="comment">#Immutable，系统不允许对这个文件进行任何的修改。如果目录具有这个属性，那么任何的进程只能修改目录之下的文件，不允许建立和删除文件。</span></span><br><span class="line">D   <span class="comment">#检查压缩文件中的错误。</span></span><br><span class="line">d   <span class="comment">#No dump，在进行文件系统备份时，dump程序将忽略这个文件。</span></span><br><span class="line">C   <span class="comment">#Compress，系统以透明的方式压缩这个文件。从这个文件读取时，返回的是解压之后的数据；而向这个文件中写入数据时，数据首先被压缩之后才写入磁盘。</span></span><br><span class="line">s   <span class="comment">#Secure Delete，让系统在删除这个文件时，使用0填充文件所在的区域。</span></span><br><span class="line">u   <span class="comment">#Undelete，当一个应用程序请求删除这个文件，系统会保留其数据块以便以后能够恢复删除这个文件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用chattr命令防止系统中某个关键文件被修改：</span></span><br><span class="line">chattr +i /etc/resolv.conf</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 用lsattr查询文件属性：</span></span><br><span class="line">lsattr /etc/resolv.conf</span><br><span class="line">----i-------- /etc/resolv.conf <span class="comment">#显示如上</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件：</span></span><br><span class="line">chattr +a /var/<span class="built_in">log</span>/messages</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> chattr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise笔记</title>
      <link href="/2018/03/07/2018-03-07-Promise/"/>
      <url>/2018/03/07/2018-03-07-Promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise笔记"><a href="#Promise笔记" class="headerlink" title="Promise笔记"></a>Promise笔记</h1><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p><img src="/public/img/promise1.png" alt="执行流程"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise的设计</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">    <span class="comment">/* 执行器 executor */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 一段耗时很长的异步操作</span></span><br><span class="line">        resolve(); <span class="comment">// 数据处理完成</span></span><br><span class="line">        reject(); <span class="comment">// 数据处理出错</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 成功，下一步</span></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 失败，做相应处理</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="支持情况"><a href="#支持情况" class="headerlink" title="支持情况"></a>支持情况</h2><p><img src="/public/img/promise2.png" alt="支持情况"></p><h2 id="三个状态"><a href="#三个状态" class="headerlink" title="三个状态"></a>三个状态</h2><ul><li>pending[待定] 初始状态</li><li>fulfilled[实现] 操作成功</li><li>rejected[被否定] 操作失败</li></ul><p>Promise 状态一经改变，不会再边<br>Promise 一经创建，执行器立即执行</p><a id="more"></a><h2 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h2><ul><li>接受两个函数作为参数<code>fulfilled</code>,<code>rejexted</code></li><li>返回一个新的Promise实例，所以可以链式调用</li></ul><ul><li>当前边的Promise状态改变时，<code>·then()</code>根据其最终的状态，选择待定状态相应函数执行</li><li>状态相应函数可以返回新的Promise或其他值</li><li>如果返回新的Promise，那么下一级的<code>.then()</code>会在新的Promise状态改变后执行</li><li>如果返回其他值，则会立即执行下一级的<code>.then()</code></li></ul><h2 id="基础例子"><a href="#基础例子" class="headerlink" title="基础例子"></a>基础例子</h2><h3 id="定时执行"><a href="#定时执行" class="headerlink" title="定时执行"></a>定时执行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( value + <span class="string">' world'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>输出</strong> ： hello world</p></blockquote><h3 id="分两次，顺序依次执行"><a href="#分两次，顺序依次执行" class="headerlink" title="分两次，顺序依次执行"></a>分两次，顺序依次执行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">'hello'</span>);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(<span class="string">'world1'</span>);</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">' world2'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>输出</strong> ：<br>hello<br>world1 world2</p></blockquote><h3 id="假如一个Promise已经完成了，再-then-会怎样？"><a href="#假如一个Promise已经完成了，再-then-会怎样？" class="headerlink" title="假如一个Promise已经完成了，再.then()会怎样？"></a>假如一个Promise已经完成了，再.then()会怎样？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'the promise fulfilled'</span>);</span><br><span class="line">        resolve(<span class="string">'hello, world'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    promise.then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>输出</strong> ：<br>the promise fulfilled<br>hello, world</p></blockquote><h3 id="假如在-then-的函数里面不返回新的Promise，会怎样？"><a href="#假如在-then-的函数里面不返回新的Promise，会怎样？" class="headerlink" title="假如在.then()的函数里面不返回新的Promise，会怎样？"></a>假如在.then()的函数里面不返回新的Promise，会怎样？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'Mr.Laurence'</span>);</span><br><span class="line">                    resolve(<span class="string">'Merry Xmas'</span>);</span><br><span class="line">                &#125;, <span class="number">2000</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">' world'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>输出</strong> ：<br>hello<br>false world<br>Mr.Laurence</p></blockquote><h3 id="嵌套-then"><a href="#嵌套-then" class="headerlink" title="嵌套.then()"></a>嵌套.then()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Step 1'</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="number">100</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Step 1-1'</span>);</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    resolve(<span class="number">110</span>);</span><br><span class="line">                &#125;, <span class="number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Step 1-2'</span>);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Step 1-3'</span>);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Step 2'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//改写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Step 1'</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="number">100</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Step 1-1'</span>);</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(<span class="number">110</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Step 1-2'</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Step 1-3'</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Step 2'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>输出</strong> ：<br>Step 1<br>Step 1-1<br>Step 1-2<br>Step 1-3<br>110<br>Step 2</p></blockquote><h2 id="典型问题"><a href="#典型问题" class="headerlink" title="典型问题"></a>典型问题</h2><h3 id="假设doSomething和doSomethingElse返回的都是一个Promise实例"><a href="#假设doSomething和doSomethingElse返回的都是一个Promise实例" class="headerlink" title="假设doSomething和doSomethingElse返回的都是一个Promise实例"></a>假设doSomething和doSomethingElse返回的都是一个Promise实例</h3><blockquote><p><strong><a href="http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/" target="_blank" rel="noopener">原文地址</a></strong>：<a href="http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html" target="_blank" rel="noopener">http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html</a><br><strong><a href="http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/" target="_blank" rel="noopener">译文地址</a></strong>：<a href="http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/" target="_blank" rel="noopener">http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题一</span></span><br><span class="line">doSomething()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doSomethingElse();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(finalHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案</span></span><br><span class="line"><span class="comment">// doSomething</span></span><br><span class="line"><span class="comment">// |-----------|</span></span><br><span class="line"><span class="comment">//             doSomethingElse(undefined)</span></span><br><span class="line"><span class="comment">//             |------------|</span></span><br><span class="line"><span class="comment">//                          finalHandler(resultOfDoSomethingElse)</span></span><br><span class="line"><span class="comment">//                          |------------|</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题二</span></span><br><span class="line">doSomething()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        doSomethingElse();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(finalHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案</span></span><br><span class="line"><span class="comment">// doSomething</span></span><br><span class="line"><span class="comment">// |------------------|</span></span><br><span class="line"><span class="comment">//                    doSomethingElse(undefined)</span></span><br><span class="line"><span class="comment">//                    |------------------|</span></span><br><span class="line"><span class="comment">//                    finalHandler(undefined)</span></span><br><span class="line"><span class="comment">//                    |------------------|</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题三</span></span><br><span class="line">doSomething()</span><br><span class="line">    .then(doSomethingElse())</span><br><span class="line">    .then(finalHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案</span></span><br><span class="line"><span class="comment">// doSomething</span></span><br><span class="line"><span class="comment">// |------------------|</span></span><br><span class="line"><span class="comment">// doSomethingElse(undefined)</span></span><br><span class="line"><span class="comment">// |----------------------------------|</span></span><br><span class="line"><span class="comment">//                    finalHandler(resultOfDoSomething)</span></span><br><span class="line"><span class="comment">//                    |------------------|</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题四</span></span><br><span class="line">doSomething()</span><br><span class="line">    .then(doSomethingElse)</span><br><span class="line">    .then(finalHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案</span></span><br><span class="line"><span class="comment">// doSomething</span></span><br><span class="line"><span class="comment">// |-----------|</span></span><br><span class="line"><span class="comment">//             doSomethingElse(resultOfDoSomething)</span></span><br><span class="line"><span class="comment">//             |------------|</span></span><br><span class="line"><span class="comment">//                         finalHandler(resultOfDoSomethingElse)</span></span><br><span class="line"><span class="comment">//                         |------------------|</span></span><br></pre></td></tr></table></figure><h2 id="实现队列"><a href="#实现队列" class="headerlink" title="实现队列"></a>实现队列</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = doSomething();</span><br><span class="line"></span><br><span class="line">promise = promise.then(doSomethingElse);</span><br><span class="line">promise = promise.then(doSomethingElse2);</span><br><span class="line">promise = promise.then(doSomethingElse3);</span><br></pre></td></tr></table></figure><h3 id="使用forEach"><a href="#使用forEach" class="headerlink" title="使用forEach"></a>使用forEach</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queue</span>(<span class="params">things</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">    things.forEach(<span class="function"><span class="params">thing</span> =&gt;</span> &#123;</span><br><span class="line">        promise = promise.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">                doThing(thing, () =&gt; &#123;</span><br><span class="line">                    resolve()</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue([<span class="string">'21lots'</span>, <span class="string">'of'</span>, <span class="string">'things'</span>]);</span><br></pre></td></tr></table></figure><blockquote><p><strong>常见错误</strong> ： 没有把<code>.then()</code>产生的❤新Promise实例复制给Promise，没有生成队列</p></blockquote><h3 id="使用-reduce"><a href="#使用-reduce" class="headerlink" title="使用.reduce()"></a>使用<code>.reduce()</code></h3><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ul><li>reject(‘错误信息’).then(null,message =&gt; {})</li><li>throw new Error(‘错误信息’).catch(message =&gt; {})</li></ul><ul><li>推荐使用第二种，清晰好读，并且可以捕获前面的错误</li><li>建议在所有队列都加上<code>.catch()</code>,以避免漏掉错误处理造成意想不到的问题</li></ul><h3 id="Promise会自动捕获内部异常，并交给rejected响应函数处理-catch捕获"><a href="#Promise会自动捕获内部异常，并交给rejected响应函数处理-catch捕获" class="headerlink" title="Promise会自动捕获内部异常，并交给rejected响应函数处理-catch捕获"></a>Promise会自动捕获内部异常，并交给<code>rejected</code>响应函数处理-catch捕获</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'here we go'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'bye'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( value + <span class="string">' world'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch( <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'Error：'</span>, error.message);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise会自动捕获内部异常，并交给rejected响应函数处理-reject响应捕获"><a href="#Promise会自动捕获内部异常，并交给rejected响应函数处理-reject响应捕获" class="headerlink" title="Promise会自动捕获内部异常，并交给rejected响应函数处理-reject响应捕获"></a>Promise会自动捕获内部异常，并交给rejected响应函数处理-reject响应捕获</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        reject(<span class="string">'bye'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( value + <span class="string">' world'</span>);</span><br><span class="line">    &#125;, value =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'Error：'</span>, value);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="catch-then-连用"><a href="#catch-then-连用" class="headerlink" title=".catch() + .then()  连用"></a>.catch() + .then()  连用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'test error'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch( <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'I catch：'</span>, err);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面这一行的注释将引发不同的走向</span></span><br><span class="line">        <span class="comment">// throw new Error('another error');</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'arrive here'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'... and here'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch( <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'No, I catch：'</span>, err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><ul><li>Promise.all([p1,p2,p3])用于将多个Promise实例包装成一个新的Promise实例</li></ul><ul><li>返回的实例就是普通的Promise</li><li>接受一个数组作为参数</li><li>数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态改变</li><li>当所有的Promise都完成，该Promise完成，返回值是全部值的数组</li><li>任何一个失败，该Promise失败，返回值是第一个子Promise的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    .then( <span class="function"><span class="params">all</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'1：'</span>, all);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.all([ <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'ooxx'</span>);</span><br><span class="line">        &#125;, <span class="string">'xxoo'</span>, <span class="literal">false</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">all</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'2：'</span>, all);</span><br><span class="line">        <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(<span class="string">'I\'m P1'</span>);</span><br><span class="line">            &#125;, <span class="number">1500</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(<span class="string">'I\'m P2'</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(<span class="string">'I\'m P3'</span>);</span><br><span class="line">            &#125;, <span class="number">3000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">all</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'all'</span>, all);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch( <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Catch：'</span>, err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise-all-map"><a href="#Promise-all-map" class="headerlink" title="Promise.all() + .map()"></a>Promise.all() + .map()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> FileSystem = <span class="built_in">require</span>(<span class="string">'./FileSystem'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLargest</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> FileSystem.readDir(dir, <span class="string">'utf-8'</span>)</span><br><span class="line">        .then( <span class="function"><span class="params">files</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.all( files.map( <span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">                    fs.stat(path.join(dir, file), (err, stat) =&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">                        <span class="keyword">if</span> (stat.isDirectory()) &#123;</span><br><span class="line">                            <span class="keyword">return</span> resolve(&#123;</span><br><span class="line">                                size: <span class="number">0</span></span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        stat.file = file;</span><br><span class="line">                        resolve(stat);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;)</span><br><span class="line">        .then( <span class="function"><span class="params">stats</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> biggest = stats.reduce( <span class="function">(<span class="params">memo, stat</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(memo.size &lt; stat.size) &#123;</span><br><span class="line">                    <span class="keyword">return</span> stat;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> memo;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> biggest.file;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h2><blockquote><p>返回一个<code>fulfilled</code>的Promise实例，或原始的Promise实例</p></blockquote><ul><li>参数为空，返回一个<code>fulfilled</code>的Promise实例</li><li>参数是一个普通值，同上，不过<code>fulfilled</code>相应函数会得到这个参数</li><li>参数为Promise实例，则返回该实例，不做任何修改</li><li>参数为<code>thenable</code>，则立刻执行<code>.then()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">    .then( <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Step 1'</span>,value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'Hello'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value, <span class="string">'World'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(<span class="string">'Good'</span>);</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value, <span class="string">' evening'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123;</span><br><span class="line">            then() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">', everyone'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>输出</strong>：<br>Step 1 undefined<br>Hello World<br>Good  evening<br>, everyone</p></blockquote><h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h2><blockquote><p>返回一个<code>reject</code>的Promise实例，或原始的Promise实例</p></blockquote><ul><li>Promise.reject()不认<code>thenable</code></li><li>参数为空，返回一个<code>fulfilled</code>的Promise实例</li><li>参数是一个普通值，同上，不过<code>fulfilled</code>相应函数会得到这个参数</li><li>参数为Promise实例，则返回该实例，不做任何修改</li><li>参数为<code>thenable</code>，则立刻执行<code>.then()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="built_in">Promise</span>.reject(<span class="string">'something wrong'</span>);</span><br><span class="line">promise</span><br><span class="line">    .then( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'it\'s ok'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'no, it\'s not ok'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(&#123;</span><br><span class="line">            then() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'it will be ok'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">catch</span>() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'not yet'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><blockquote><p>类似于<code>Promise.all()</code>，区别在于它有任意一个完成就算完成</p></blockquote><h3 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h3><ul><li>把异步操作和定时器放一起</li><li>如果定时器先触发，就认为超时，告知用户</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这是一个长时间的调用</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'I\'m P1'</span>);</span><br><span class="line">    &#125;, <span class="number">10000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这是个稍短的调用</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'I\'m P2'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2])</span><br><span class="line">    .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="把回调包装成Promise"><a href="#把回调包装成Promise" class="headerlink" title="把回调包装成Promise"></a>把回调包装成Promise</h2><ul><li>可读性更好</li><li>返回结果可以加入任何Promise队列 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sql = <span class="function"><span class="keyword">function</span>(<span class="params">sql, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        connection.query(sql, arr, <span class="function"><span class="keyword">function</span>(<span class="params">err, rows</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">throw</span> err;</span><br><span class="line">            &#125;</span><br><span class="line">            resolve(rows);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        ttt(<span class="string">'SELECT * FROM `user` WHERE `username` = ?'</span>, req.query.name).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            arr.user = value[<span class="number">0</span>];</span><br><span class="line">            resolve(value[<span class="number">0</span>].id)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    test.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            ttt(<span class="string">'SELECT * FROM `order` WHERE `userid` = ?'</span>, value).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(value[<span class="number">0</span>].id)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="把任何异步操作包装成Promise"><a href="#把任何异步操作包装成Promise" class="headerlink" title="把任何异步操作包装成Promise"></a>把任何异步操作包装成Promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 弹出窗体</span></span><br><span class="line"><span class="keyword">let</span> confirm = popupManager.confirm(<span class="string">'您确定么？'</span>);</span><br><span class="line">confirm.promise</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do confirm staff</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do cancel staff</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 窗体的构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Confirm</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.confirmButton.onClick = resolve;</span><br><span class="line">            <span class="keyword">this</span>.cancelButton.onClick = reject;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fetch-API"><a href="#Fetch-API" class="headerlink" title="Fetch API"></a>Fetch API</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fetch(<span class="string">'some.json'</span>)</span><br><span class="line">    .then( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response.json();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do something with the json</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .catch( <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><ul><li>赋予<code>javascript</code>以顺序手法编写异步脚本的能力</li><li>既保留异步运算符的无阻塞特性，还继续使用同步写法</li><li>还能正常使用<code>return</code>/<code>try</code>/<code>catch</code></li><li>基于Promise</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveAfter2Seconds</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(x);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="keyword">await</span> resolveAfter2Seconds(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(x); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure><h2 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h2><h3 id="常见异步操作"><a href="#常见异步操作" class="headerlink" title="常见异步操作"></a>常见异步操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步操作的常见语法</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16610</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件侦听与响应</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'start'</span>).addEventListener(<span class="string">'click'</span>, start, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 响应事件，进行相应的操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery 用 `.on()` 也是事件侦听</span></span><br><span class="line">$(<span class="string">'#start'</span>).on(<span class="string">'click'</span>, start);</span><br><span class="line"></span><br><span class="line">### 常见异步操作解决方案</span><br><span class="line"><span class="comment">// 回调</span></span><br><span class="line"><span class="comment">// 比较常见的有ajax</span></span><br><span class="line">$.ajax(<span class="string">'http://baidu.com'</span>, &#123;</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这里就是回调函数了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者在页面加载完毕后回调</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 这里也是回调函数</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回调地狱</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16611</span></span><br><span class="line"></span><br><span class="line">a(<span class="function"><span class="keyword">function</span> (<span class="params">resultsFromA</span>) </span>&#123;</span><br><span class="line">    b(resultsFromA, <span class="function"><span class="keyword">function</span> (<span class="params">resultsFromB</span>) </span>&#123;</span><br><span class="line">        c(resultsFromB, <span class="function"><span class="keyword">function</span> (<span class="params">resultsFromC</span>) </span>&#123;</span><br><span class="line">            d(resultsFromC, <span class="function"><span class="keyword">function</span> (<span class="params">resultsFromD</span>) </span>&#123;</span><br><span class="line">                e(resultsFromD, <span class="function"><span class="keyword">function</span> (<span class="params">resultsFromE</span>) </span>&#123;</span><br><span class="line">                    f(resultsFromE, <span class="function"><span class="keyword">function</span> (<span class="params">resultsFromF</span>) </span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(resultsFromF);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="回调地狱示例"><a href="#回调地狱示例" class="headerlink" title="回调地狱示例"></a>回调地狱示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历目录，找出最大的一个文件</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16611</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLargest</span>(<span class="params">dir, callback</span>) </span>&#123;</span><br><span class="line">    fs.readdir(dir, <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> callback(err); <span class="comment">// [1]</span></span><br><span class="line">        <span class="keyword">let</span> count = files.length; <span class="comment">// [2]</span></span><br><span class="line">        <span class="keyword">let</span> errored = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> stats = [];</span><br><span class="line">        files.forEach( <span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">            fs.stat(path.join(dir, file), (err, stat) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (errored) <span class="keyword">return</span>; <span class="comment">// [1]</span></span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    errored = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> callback(err);</span><br><span class="line">                &#125;</span><br><span class="line">                stats.push(stat); <span class="comment">// [2]</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (--count === <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> largest = stats</span><br><span class="line">                        .filter(<span class="function"><span class="keyword">function</span> (<span class="params">stat</span>) </span>&#123; <span class="keyword">return</span> stat.isFile(); &#125;)</span><br><span class="line">                        .reduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev, next</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">if</span> (prev.size &gt; next.size) <span class="keyword">return</span> prev;</span><br><span class="line">                            <span class="keyword">return</span> next;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    callback(<span class="literal">null</span>, files[stats.indexOf(largest)]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findLargest(<span class="string">'./path/to/dir'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, filename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'largest file was:'</span>, filename);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise的设计</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16612</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">    <span class="comment">/* 执行器 executor */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 一段耗时很长的异步操作</span></span><br><span class="line"></span><br><span class="line">        resolve(); <span class="comment">// 数据处理完成</span></span><br><span class="line"></span><br><span class="line">        reject(); <span class="comment">// 数据处理出错</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 成功，下一步</span></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 失败，做相应处理</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单的范例-定时执行</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16613</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'here we go'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( value + <span class="string">' world'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分两次，顺序依次执行</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16614</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'here we go'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(<span class="string">'world'</span>);</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( value + <span class="string">' world'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假如一个Promise已经完成了，再.then()会怎样？</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16615</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'the promise fulfilled'</span>);</span><br><span class="line">        resolve(<span class="string">'hello, world'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    promise.then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假如在.then()的函数里面不返回新的Promise，会怎样？</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16616</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'here we go'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'everyone'</span>);</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'Mr.Laurence'</span>);</span><br><span class="line">                    resolve(<span class="string">'Merry Xmas'</span>);</span><br><span class="line">                &#125;, <span class="number">2000</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">' world'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 嵌套.then()</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16618</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Step 1'</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">100</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Step 1-1'</span>);</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(<span class="number">110</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">            .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Step 1-2'</span>);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;)</span><br><span class="line">            .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Step 1-3'</span>);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Step 2'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随堂小测试</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16619</span></span><br><span class="line"><span class="comment">// 假设doSomething和doSomethingElse返回的都是一个Promise实例</span></span><br><span class="line"><span class="comment">// 原问题地址：http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html</span></span><br><span class="line"><span class="comment">// 译文地址：http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题一</span></span><br><span class="line">doSomething()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doSomethingElse();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(finalHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案</span></span><br><span class="line"><span class="comment">// doSomething</span></span><br><span class="line"><span class="comment">// |-----------|</span></span><br><span class="line"><span class="comment">//             doSomethingElse(undefined)</span></span><br><span class="line"><span class="comment">//             |------------|</span></span><br><span class="line"><span class="comment">//                          finalHandler(resultOfDoSomethingElse)</span></span><br><span class="line"><span class="comment">//                          |------------|</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题二</span></span><br><span class="line">doSomething()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        doSomethingElse();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(finalHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案</span></span><br><span class="line"><span class="comment">// doSomething</span></span><br><span class="line"><span class="comment">// |------------------|</span></span><br><span class="line"><span class="comment">//                    doSomethingElse(undefined)</span></span><br><span class="line"><span class="comment">//                    |------------------|</span></span><br><span class="line"><span class="comment">//                    finalHandler(undefined)</span></span><br><span class="line"><span class="comment">//                    |------------------|</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题三</span></span><br><span class="line">doSomething()</span><br><span class="line">    .then(doSomethingElse())</span><br><span class="line">    .then(finalHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案</span></span><br><span class="line"><span class="comment">// doSomething</span></span><br><span class="line"><span class="comment">// |------------------|</span></span><br><span class="line"><span class="comment">// doSomethingElse(undefined)</span></span><br><span class="line"><span class="comment">// |----------------------------------|</span></span><br><span class="line"><span class="comment">//                    finalHandler(resultOfDoSomething)</span></span><br><span class="line"><span class="comment">//                    |------------------|</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题四</span></span><br><span class="line">doSomething()</span><br><span class="line">    .then(doSomethingElse)</span><br><span class="line">    .then(finalHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案</span></span><br><span class="line"><span class="comment">// doSomething</span></span><br><span class="line"><span class="comment">// |-----------|</span></span><br><span class="line"><span class="comment">//             doSomethingElse(resultOfDoSomething)</span></span><br><span class="line"><span class="comment">//             |------------|</span></span><br><span class="line"><span class="comment">//                         finalHandler(resultOfDoSomethingElse)</span></span><br><span class="line"><span class="comment">//                         |------------------|</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise会自动捕获内部异常，并交给rejected响应函数处理-catch捕获</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16620</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'here we go'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'bye'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( value + <span class="string">' world'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch( <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'Error：'</span>, error.message);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise会自动捕获内部异常，并交给rejected响应函数处理-reject响应捕获</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16620</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'here we go'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        reject(<span class="string">'bye'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( value + <span class="string">' world'</span>);</span><br><span class="line">    &#125;, value =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'Error：'</span>, value);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .catch() + .then()</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16621</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'here we go'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'test error'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch( <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'I catch：'</span>, err);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面这一行的注释将引发不同的走向</span></span><br><span class="line">        <span class="comment">// throw new Error('another error');</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'arrive here'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'... and here'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch( <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'No, I catch：'</span>, err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用`Promise.all()`包装多个Promise实例</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16634</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'here we go'</span>);</span><br><span class="line"><span class="built_in">Promise</span>.all([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    .then( <span class="function"><span class="params">all</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'1：'</span>, all);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.all([ <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'ooxx'</span>);</span><br><span class="line">        &#125;, <span class="string">'xxoo'</span>, <span class="literal">false</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">all</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'2：'</span>, all);</span><br><span class="line">        <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(<span class="string">'I\'m P1'</span>);</span><br><span class="line">            &#125;, <span class="number">1500</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(<span class="string">'I\'m P2'</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(<span class="string">'I\'m P3'</span>);</span><br><span class="line">            &#125;, <span class="number">3000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">all</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'all'</span>, all);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch( <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Catch：'</span>, err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历目录，找出最大的一个文件-通过Promise.all()和.map()</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16622</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> FileSystem = <span class="built_in">require</span>(<span class="string">'./FileSystem'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLargest</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> FileSystem.readDir(dir, <span class="string">'utf-8'</span>)</span><br><span class="line">        .then( <span class="function"><span class="params">files</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.all( files.map( <span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">                    fs.stat(path.join(dir, file), (err, stat) =&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">                        <span class="keyword">if</span> (stat.isDirectory()) &#123;</span><br><span class="line">                            <span class="keyword">return</span> resolve(&#123;</span><br><span class="line">                                size: <span class="number">0</span></span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        stat.file = file;</span><br><span class="line">                        resolve(stat);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;)</span><br><span class="line">        .then( <span class="function"><span class="params">stats</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> biggest = stats.reduce( <span class="function">(<span class="params">memo, stat</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(memo.size &lt; stat.size) &#123;</span><br><span class="line">                    <span class="keyword">return</span> stat;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> memo;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> biggest.file;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开发一个爬虫，爬取某网站。（半成品）</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16624</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url = [<span class="string">'http://blog.meathill.com/'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchAll</span>(<span class="params">urls</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> urls.reduce(<span class="function">(<span class="params">promise, url</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> promise.then( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fetch(url);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="built_in">Promise</span>.resolve());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> spider.fetch(url)</span><br><span class="line">        .then( <span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> saveOrOther(content);</span><br><span class="line">        &#125;)</span><br><span class="line">        .then( <span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> links = spider.findLinks(content);</span><br><span class="line">            <span class="keyword">return</span> fetchAll(links);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line">fetchAll(url);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise.resolve()</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16625</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">    .then( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Step 1'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'Hello'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value, <span class="string">'World'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(<span class="string">'Good'</span>);</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value, <span class="string">' evening'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123;</span><br><span class="line">            then() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">', everyone'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise.reject()</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16626</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="built_in">Promise</span>.reject(<span class="string">'something wrong'</span>);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">    .then( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'it\'s ok'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'no, it\'s not ok'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(&#123;</span><br><span class="line">            then() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'it will be ok'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">catch</span>() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'not yet'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise.race()</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16627</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这是一个长时间的调用</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'I\'m P1'</span>);</span><br><span class="line">    &#125;, <span class="number">10000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这是个稍短的调用</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'I\'m P2'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2])</span><br><span class="line">    .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把回调包装成Promise</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16628</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'./FileSystem'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'../README.md'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(content);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用JS包装readFile</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16628</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    readDir: <span class="function"><span class="keyword">function</span> (<span class="params">path, options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            fs.readdir(path, options, (err, files) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> err;</span><br><span class="line">                &#125;</span><br><span class="line">                resolve(files);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    readFile: <span class="function"><span class="keyword">function</span> (<span class="params">path, options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            fs.readFile(path, options, (err, content) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> err;</span><br><span class="line">                &#125;</span><br><span class="line">                resolve(content);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把任何异步操作包装成Promise</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16629</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出窗体</span></span><br><span class="line"><span class="keyword">let</span> confirm = popupManager.confirm(<span class="string">'您确定么？'</span>);</span><br><span class="line">confirm.promise</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do confirm staff</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do cancel staff</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 窗体的构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Confirm</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.confirmButton.onClick = resolve;</span><br><span class="line">            <span class="keyword">this</span>.cancelButton.onClick = reject;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fetch API</span></span><br><span class="line"><span class="comment">// https://www.imooc.com/video/16630</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fetch(<span class="string">'some.json'</span>)</span><br><span class="line">    .then( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response.json();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then( <span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do something with the json</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .catch( <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><code>`</code>javascript<br>// async/await<br>// <a href="https://www.imooc.com/video/16631" target="_blank" rel="noopener">https://www.imooc.com/video/16631</a></p><p>function resolveAfter2Seconds(x) {<br>    return new Promise(resolve =&gt; {<br>        setTimeout(() =&gt; {<br>            resolve(x);<br>        }, 2000);<br>    });<br>}</p><p>async function f1() {<br>    var x = await resolveAfter2Seconds(10);<br>    console.log(x); // 10<br>}<br>f1();</p>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端笔记 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2017/11/21/2017-11-21-regex/"/>
      <url>/2017/11/21/2017-11-21-regex/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>正则表达式是一种描述字符串数据模式的方法，是检查、处理字符串的强力工具。</p><h2 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(“abc”);</span><br><span class="line"><span class="keyword">var</span> re2 = <span class="regexp">/abc/</span>;</span><br></pre></td></tr></table></figure><p>使用构造函数创建时，反斜杠的使用规则与往常相同。<br>使用双斜杠字面值创建时，不确定字符是否具有特殊含义，而不是字母、数字、空格式，只要在字符前加上反斜杠即可。</p><h2 id="匹配测试"><a href="#匹配测试" class="headerlink" title="匹配测试"></a>匹配测试</h2><h3 id="test方法"><a href="#test方法" class="headerlink" title="test方法"></a>test方法</h3><p>接受用户传递的字符串，并返回一个布尔值，表示字符串中是否包含能与表达式模式匹配的字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re2 = <span class="regexp">/abc/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(re2.test(<span class="string">'abcde'</span>));</span><br><span class="line"><span class="comment">// &gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(re2.test(<span class="string">'abxde'</span>));</span><br><span class="line"><span class="comment">// &gt; false</span></span><br></pre></td></tr></table></figure></p><h2 id="exec方法"><a href="#exec方法" class="headerlink" title="exec方法"></a>exec方法</h2><p>如果无法匹配模式则返回null,否则返回一个表示匹配字符串信息的对象。<br>exec方法返回的对象中包含index属性，表示字符串成功匹配的起始位置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re2 = <span class="regexp">/abc/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(re2.exec(<span class="string">'abcde'</span>));</span><br><span class="line"><span class="comment">// &gt; ["abc", index: 0, input: "abcde"]</span></span><br><span class="line"><span class="built_in">console</span>.log(re2.exec(<span class="string">'abxde'</span>));</span><br><span class="line"><span class="comment">// &gt; null</span></span><br></pre></td></tr></table></figure></p><p>若正则表达式中包含圆括号的子表达式分组，与这些分组匹配的文本也会出现在数组中。<br>第一个元素是与整个模式匹配的字符串，<br>其后是与第一个分组匹配的部分字符串，然后是第二个分组如此类推。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dataTimeRE = <span class="regexp">/(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)-(\d&#123;4&#125;)/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'24-8-2016'</span>;</span><br><span class="line"><span class="keyword">var</span> match = dataTimeRE.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(match);</span><br></pre></td></tr></table></figure><p>// &gt; [“24-8-2016”, “24”, “8”, “2016”, index: 0, input: “24-8-2016”]</p><h2 id="字符组快捷写法"><a href="#字符组快捷写法" class="headerlink" title="字符组快捷写法"></a>字符组快捷写法</h2><ul><li>\d －－数字符号</li><li>\w －－字母和数字符号</li><li>\s －－空白符号（空格，制表符，换行符等）</li><li>\D －－非数字符号</li><li>\W －－非字母和数字符号</li><li>\S －－非空白符号<br>. －－除了换行符以外的任意符号<h2 id="部分模式重复"><a href="#部分模式重复" class="headerlink" title="部分模式重复"></a>部分模式重复</h2></li><li>＋ －－该元素至少重复一次</li><li>＊ －－该元素至少重复一次，同时可以匹配模式不存在的情况</li><li>？ －－可选，模式出现0次或1次</li><li>{ } －－指明模式出现的次数。{4},4次。{2,4},2~4次。{,4},0~4次。{4.},至少4次以上。<h2 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h2></li><li>^ －－字符始位置</li><li>$ －－字符结束位置</li><li>\b －－单词边界（ \w 集合）<br>/^\d+$/：匹配一个或者多个数字组成的字符串。<br>/^!/ ：匹配任何以感叹号开头的字符串。<br>/x^/ ：不匹配任何字符串。</li></ul><h2 id="子表达式分组"><a href="#子表达式分组" class="headerlink" title="子表达式分组"></a>子表达式分组</h2><p>如果一次性相想对多个元素使用＊或者＋，那么就需要使用分组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strRE = <span class="regexp">/boo+(hoo+)+/i</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'Booooohooooohoohoooo'</span>;</span><br><span class="line"><span class="keyword">var</span> test = strRE.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br><span class="line"><span class="comment">// &gt; true</span></span><br></pre></td></tr></table></figure></p><h2 id="选项模式"><a href="#选项模式" class="headerlink" title="选项模式"></a>选项模式</h2><p>管道符号（｜），表示从其左侧的模式和右侧的模式任意选择一个进行匹配。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animalCount = <span class="regexp">/\b\d+ (pig|cow|chicken)s?\b/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(animalCount.test(<span class="string">"15 cows"</span>));</span><br><span class="line"><span class="comment">// &gt; true</span></span><br></pre></td></tr></table></figure></p><h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2><h3 id="检查手机号码"><a href="#检查手机号码" class="headerlink" title="检查手机号码"></a>检查手机号码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobile</span>(<span class="params">tel</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="regexp">/^((\(\d&#123;2,3&#125;\))|(\d&#123;3&#125;\-))?(1[34578]\d&#123;9&#125;)$/</span>.test(tel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取URL的Query参数"><a href="#获取URL的Query参数" class="headerlink" title="获取URL的Query参数"></a>获取URL的Query参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQuery</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = location.search.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[\?\&amp;]"</span> + name+ <span class="string">"=([^\&amp;]+)"</span>,<span class="string">"i"</span>));</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="literal">null</span> || result.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拆分host后缀"><a href="#拆分host后缀" class="headerlink" title="拆分host后缀"></a>拆分host后缀</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">domainarr</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> durl = <span class="regexp">/http:\/\/([^\/]+)\//i</span>;</span><br><span class="line">     <span class="keyword">var</span> hosts = url.match(durl);</span><br><span class="line">     <span class="keyword">var</span> d_arr;</span><br><span class="line">     hosts = hosts[<span class="number">1</span>];</span><br><span class="line">     d_arr = hosts.split(<span class="string">'.'</span>);</span><br><span class="line">     <span class="keyword">return</span> d_arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6实用小记 (一)</title>
      <link href="/2017/10/21/2017-10-21-ES61/"/>
      <url>/2017/10/21/2017-10-21-ES61/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在学习ES6中挑选出比较常用、实用的部分。</p><ul><li><p>var、let、const<br>let和const的出现，应该就是为了替代var吧，能使代码结构更加之严谨。</p></li><li><p>let用于声明变量，const用于声明常量。<br>意思就是let可以重新赋值，const则不能，并且const声明就必须赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a =<span class="number">1</span>;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// Identifier 'a' has already been declared</span></span><br><span class="line"><span class="keyword">let</span> a ;</span><br><span class="line"><span class="comment">// undefind</span></span><br><span class="line"><span class="keyword">const</span> b ;</span><br><span class="line"><span class="comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure></li><li><p>块级作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="comment">//  3</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure></li><li><p>不允许重复声明<br>在一定程度上防止了变量污染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;  <span class="comment">// or const a = 3;let a = 4;</span></span><br><span class="line"><span class="comment">// Identifier 'a' has already been declared</span></span><br></pre></td></tr></table></figure></li><li><p>不存在变量提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">var</span> a =<span class="number">1</span>;</span><br><span class="line"><span class="comment">// undefind</span></span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br><span class="line"><span class="keyword">let</span> b =<span class="number">1</span>;</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure></li><li><p>暂存性死区<br>在当前的块级作用域中声明，即代表绑定了该环境，在当前环境中声明前赋值都会报错。因为在这个区域不支持变量提升。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    a =<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">let</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br><span class="line"></span><br><span class="line">### 最外层不再是window</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.c) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p>模版字符串<br>在拼接HTML插入DOM的时候，功效尤其显著。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'jax'</span>;</span><br><span class="line"><span class="keyword">var</span> say = <span class="string">'hello,'</span>+name+<span class="string">'.'</span>+<span class="string">'Nice to meet you!'</span></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'jax'</span>;</span><br><span class="line"><span class="keyword">var</span> say = <span class="string">`hello,<span class="subst">$&#123;name&#125;</span>.Nice to meet you!`</span></span><br></pre></td></tr></table></figure></li><li><p>函数默认值<br>在ES6之前，不能直接为函数的参数指定默认值，只能采用变通的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  x = x || <span class="string">'Hello'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"> x = <span class="string">'Hello'</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端笔记 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块化</title>
      <link href="/2017/09/13/2017-09-13-more/"/>
      <url>/2017/09/13/2017-09-13-more/</url>
      
        <content type="html"><![CDATA[<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>伴随着移动互联的大潮，当今越来越多的网站已经从网页模式进化到了 Webapp 模式。它们运行在现代的高级浏览器里，使用 HTML5、 CSS3、 ES6 等更新的技术来开发丰富的功能，网页已经不仅仅是完成浏览的基本需求，并且webapp通常是一个单页面应用，每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的 JavaScript 代码，这给前端开发的流程和资源组织带来了巨大的挑战。</p><p>前端开发和其他开发工作的主要区别，首先是前端是基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。</p><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>模块通过将代码分割成不同文件和命名空间，为更大规模的程序提供了结构。</p><p>模块系统的演进<br>模块系统主要解决模块的定义、依赖和导出，先来看看已经存在的模块系统。</p><h3 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"module1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"module2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"libraryA.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"module3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是最原始的 JavaScript 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 window 对象中，不同模块的接口调用都是一个作用域中，一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如 YUI 库。</p><p>这种原始的加载方式暴露了一些显而易见的弊端：</p><ul><li>全局作用域下容易造成变量冲突</li><li>文件只能按照 script 的书写顺序进行加载</li><li>开发人员必须主观解决模块和代码库的依赖关系</li><li>在大型项目中各种资源难以管理，长期积累的问题会导致代码库混乱</li></ul><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>服务器端的 Node.js 遵循 CommonJS规范，该规范的核心思想是允许模块通过 require 方法来同步加载所要依赖的其他模块，然后通过 exports 或 module.exports 来导出需要暴露的接口。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"module"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"../file.js"</span>);</span><br><span class="line">exports.doStuff = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = someValue;</span><br></pre></td></tr></table></figure></p><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><p>服务器端模块便于重用<br>NPM 中已经有将近20万个可以使用模块包<br>简单并容易使用</p><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><p>同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的<br>不能非阻塞的并行加载多个模块</p><h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><p>服务器端的 Node.js<br>Browserify，浏览器端的 CommonJS 实现，可以使用 NPM 的模块，但是编译打包后的文件体积可能很大<br>modules-webmake，类似Browserify，还不如 Browserify 灵活<br>wreq，Browserify 的前身</p><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>Asynchronous Module Definition 规范其实只有一个主要接口 define(id?, dependencies?, factory)，它要在声明模块的时候指定所有的依赖 dependencies，并且还要当做形参传到 factory 中，对于依赖的模块提前执行，依赖前置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">"module"</span>, [<span class="string">"dep1"</span>, <span class="string">"dep2"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">d1, d2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> someExportedValue;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>([<span class="string">"module"</span>, <span class="string">"../file"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">module, file</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure></p><h2 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h2><p>适合在浏览器环境中异步加载模块<br>可以并行加载多个模块</p><h2 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h2><p>提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义不顺畅<br>不符合通用的模块化思维方式，是一种妥协的实现</p><h2 id="实现：-1"><a href="#实现：-1" class="headerlink" title="实现："></a>实现：</h2><p>RequireJS<br>curl</p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>Common Module Definition 规范和 AMD 很相似，尽量保持简单，并与 CommonJS 和 Node.js 的 Modules 规范保持了很大的兼容性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">  <span class="keyword">var</span> Spinning = <span class="built_in">require</span>(<span class="string">'./spinning'</span>);</span><br><span class="line">  exports.doSomething = ...</span><br><span class="line">  <span class="built_in">module</span>.exports = ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h2><p>依赖就近，延迟执行<br>可以很容易在 Node.js 中运行</p><h2 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h2><p>依赖 SPM 打包，模块的加载逻辑偏重</p><h2 id="实现：-2"><a href="#实现：-2" class="headerlink" title="实现："></a>实现：</h2><p>Sea.js<br>coolie</p><h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><p>Universal Module Definition 规范类似于兼容 CommonJS 和 AMD 的语法糖，是模块定义的跨平台解决方案。</p><h2 id="ES6-模块"><a href="#ES6-模块" class="headerlink" title="ES6 模块"></a>ES6 模块</h2><p>EcmaScript6 标准增加了 JavaScript 语言层面的模块体系定义。ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"jquery"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">module</span> <span class="string">"localModule"</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="优点：-3"><a href="#优点：-3" class="headerlink" title="优点："></a>优点：</h2><p>容易进行静态分析<br>面向未来的 EcmaScript 标准</p><h2 id="缺点：-3"><a href="#缺点：-3" class="headerlink" title="缺点："></a>缺点：</h2><p>原生浏览器端还没有实现该标准<br>全新的命令字，新版的 Node.js才支持</p><h2 id="实现：-3"><a href="#实现：-3" class="headerlink" title="实现："></a>实现：</h2><p>Babel</p><h2 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h2><p>前端模块要在客户端中执行，所以他们需要增量加载到浏览器中。</p><p>模块的加载和传输，我们首先能想到两种极端的方式，一种是每个模块文件都单独请求，另一种是把所有模块打包成一个文件然后只请求一次。显而易见，每个模块都发起单独的请求造成了请求次数过多，导致应用启动速度慢；一次请求加载所有模块导致流量浪费、初始化过程慢。这两种方式都不是好的解决方案，它们过于简单粗暴。</p><p>分块传输，按需进行懒加载，在实际用到某些模块的时候再增量更新，才是较为合理的模块加载方案。</p><p>要实现模块的按需加载，就需要一个对整个代码库中的模块进行静态分析、编译打包的过程。</p>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
          <category> 模块化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 使用规范</title>
      <link href="/2017/08/13/2017-08-13-css-norm/"/>
      <url>/2017/08/13/2017-08-13-css-norm/</url>
      
        <content type="html"><![CDATA[<h2 id="统一"><a href="#统一" class="headerlink" title="统一"></a>统一</h2><ul><li>统一使用怪异盒子模型 <code>box-sizing:border-box;</code></li></ul><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul><li>非必要时刻，不要超过 <code>三层</code></li><li>非必要时刻，不要为 <code>id</code>  写样式</li><li>非必要时刻，不要使用 <code>style</code> 内嵌样式</li><li>非必要时刻，不要使用  <code>important</code></li></ul><h2 id="属性书写顺序"><a href="#属性书写顺序" class="headerlink" title="属性书写顺序"></a>属性书写顺序</h2><ol><li>Position</li><li>Box model</li><li>Typographic</li><li>Visual<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.declaration-order</span> &#123;</span><br><span class="line">    <span class="comment">/* 定位相关 */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 盒模型相关 */</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 文本属性、排版相关 */</span></span><br><span class="line">    <span class="attribute">font</span>: normal <span class="number">13px</span> <span class="string">"Helvetica Neue"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Visual */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e5e5</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="class-命名"><a href="#class-命名" class="headerlink" title="class 命名"></a>class 命名</h2><ul><li>小写 <code>.btn</code></li><li>破折号 <code>.btn-info</code></li><li>id的命名使用驼峰命名法  <code>#userName</code></li><li>避免过度任意的简写。<code>.btn</code>代表 <code>button</code>，但是<code>.b</code>不能表达任何意思。</li><li>尽可能短，并且意义明确。</li><li>基于最近的父class或基本class作为新class的前缀。<code>.menu-header</code> <code>.menu-container</code><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 不规范的写法 */</span></span><br><span class="line">.m &#123; ... &#125;</span><br><span class="line">.red &#123; ... &#125;</span><br><span class="line">.container &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 规范的写法 */</span></span><br><span class="line">.menu &#123; ... &#125;</span><br><span class="line">.important &#123; ... &#125;</span><br><span class="line">.menu-container &#123; ... &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 使用规范</title>
      <link href="/2017/08/13/2017-08-13-html-norm/"/>
      <url>/2017/08/13/2017-08-13-html-norm/</url>
      
        <content type="html"><![CDATA[<h2 id="通用架构"><a href="#通用架构" class="headerlink" title="通用架构"></a>通用架构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>极客学院IT在线教育平台-中国专业的IT职业在线教育平台<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"极客学院,IT职业教育,IT在线教育平台,IT在线教育,IT在线学习,it职业培训,android,ios,flash,java,python,html5,swift,cocos2dx"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"极客学院作为中国专业IT职业在线教育平台,拥有海量高清IT职业课程,涵盖30+个技术领域,如Android,iOS ,Flash,Java,Python,HTML5,Swift,Cocos2dx等视频教程.根据IT在线学习特点,极客学院推出IT学习知识体系图,IT职业学习实战路径图,帮助IT学习者从零基础起步,结合IT实战案例演练,系统学习,助你快速成为IT优秀技术人才！"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="标签属性书写顺序"><a href="#标签属性书写顺序" class="headerlink" title="标签属性书写顺序"></a>标签属性书写顺序</h3><p>class 用于标识高度可复用组件，因此应该排在首位。id 用于标识具体组件，一般提供给JS使用。</p><ol><li>class</li><li>id, name</li><li>data-*</li><li>src, for, type, href</li><li>title, alt</li></ol><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol><li>用4个空格来代替制表符（tab）</li><li>嵌套元素应当缩进一次</li><li>对于属性的定义，确保全部使用双引号，不要使用单引号。</li></ol><h3 id="避免冗余"><a href="#避免冗余" class="headerlink" title="避免冗余"></a>避免冗余</h3><p>尽量遵循 HTML 标准和语义，但是不要以牺牲实用性为代价。任何时候都要尽量使用最少的标签并保持最小的复杂度。（尤其勿滥用div标签）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不规范的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"avatar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 规范的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"avatar"</span> <span class="attr">src</span>=<span class="string">"..."</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="错误嵌套"><a href="#错误嵌套" class="headerlink" title="错误嵌套"></a>错误嵌套</h3><ol><li>a标签不可以嵌套交互式元素</li><li>块级元素可以包含内联元素和某些块级元素，内联元素不能包含块级元素，只能包含内联元素</li><li>p标签不能包含块级元素</li><li>这些标签不可包含块级元素</li><li>li标签可以包含div以及ul，ul的子元素应该只有li</li><li>元素并排（块级和块级并列，内联和内联并列)</li></ol><h4 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h4><p>浏览器是不能够正常解析的,有的虽然解析正常，但却达不到预想的目的</p><h5 id="a标签不可以嵌套交互式元素"><a href="#a标签不可以嵌套交互式元素" class="headerlink" title="a标签不可以嵌套交互式元素"></a>a标签不可以嵌套交互式元素</h5><p>a标签不可以嵌套交互式元素[a， audio（如果设置了controls属性）， button， details， embed， iframe， img（如果设置了usemap属性）， input（如果type属性不为hidden状态）， keygen， label， menu（如果type属性为toolbar状态），object（如果设置了usemap属性）， select， textarea， video（如果设置了controls属性）]<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/*下面这些写法浏览器是不能够正常解析的,有的虽然解析正常，但却达不到预想的目的*/</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>click<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"10"</span> <span class="attr">rows</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="语义错误"><a href="#语义错误" class="headerlink" title="语义错误"></a>语义错误</h4><p>页面可能正常解析，但不符合语义。这是因为浏览器自带容错机制，对于不规范的写法也能够正确的解析，各浏览器的容错机制不同，所以尽量按规范来写。</p><h5 id="块级元素可以包含内联元素和某些块级元素，内联元素不能包含块级元素，只能包含内联元素"><a href="#块级元素可以包含内联元素和某些块级元素，内联元素不能包含块级元素，只能包含内联元素" class="headerlink" title="块级元素可以包含内联元素和某些块级元素，内联元素不能包含块级元素，只能包含内联元素"></a>块级元素可以包含内联元素和某些块级元素，内联元素不能包含块级元素，只能包含内联元素</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*规范的写法*/</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>jikexueyuan<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>IT education<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/*不规范的写法*/</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>wrong<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="h1、h2、h3、h4、h5、h6、p-标签不能包含块级元素"><a href="#h1、h2、h3、h4、h5、h6、p-标签不能包含块级元素" class="headerlink" title="h1、h2、h3、h4、h5、h6、p 标签不能包含块级元素"></a>h1、h2、h3、h4、h5、h6、p 标签不能包含块级元素</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*不规范的写法*/</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/*不规范的写法*/</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="li标签可以包含div以及ul"><a href="#li标签可以包含div以及ul" class="headerlink" title="li标签可以包含div以及ul"></a>li标签可以包含div以及ul</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*规范的写法*/</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/*不规范的写法*/</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>迷路的a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="元素并排（块级和块级并列，内联和内联并列"><a href="#元素并排（块级和块级并列，内联和内联并列" class="headerlink" title="元素并排（块级和块级并列，内联和内联并列)"></a>元素并排（块级和块级并列，内联和内联并列)</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/*规范的写法*/</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/*不规范的写法*/</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是内联元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是块级元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx常用操作</title>
      <link href="/2017/06/23/2017-06-23-nginxstart/"/>
      <url>/2017/06/23/2017-06-23-nginxstart/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">强制使用https</span><br><span class="line">server &#123;  </span><br><span class="line">    listen  192.168.1.111:80;  </span><br><span class="line">    server_name test.com;  </span><br><span class="line">      </span><br><span class="line">    rewrite ^(.*)$  https://$host$1 permanent;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">nginx -s reload  ：修改配置后重新加载生效</span><br><span class="line">nginx -s reopen  ：重新打开日志文件</span><br><span class="line">nginx -t -c /path/to/nginx.conf 测试nginx配置文件是否正确</span><br><span class="line"></span><br><span class="line">关闭nginx：</span><br><span class="line">nginx -s stop  :快速停止nginx</span><br><span class="line">         quit  ：完整有序的停止nginx</span><br><span class="line"></span><br><span class="line">其他的停止nginx 方式：</span><br><span class="line"></span><br><span class="line">ps -ef | grep nginx</span><br><span class="line"></span><br><span class="line">kill -QUIT 主进程号     ：从容停止Nginx</span><br><span class="line">kill -TERM 主进程号     ：快速停止Nginx</span><br><span class="line">pkill -9 nginx          ：强制停止Nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">启动nginx:</span><br><span class="line">nginx -c /path/to/nginx.conf</span><br><span class="line"></span><br><span class="line">平滑重启nginx：</span><br><span class="line">kill -HUP 主进程号</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nrm 换源</title>
      <link href="/2017/06/07/2017-06-07-nrm/"/>
      <url>/2017/06/07/2017-06-07-nrm/</url>
      
        <content type="html"><![CDATA[<h4 id="nrm-是一个-NPM-源管理器，允许你快速地在如下-NPM-源间切换"><a href="#nrm-是一个-NPM-源管理器，允许你快速地在如下-NPM-源间切换" class="headerlink" title="nrm 是一个 NPM 源管理器，允许你快速地在如下 NPM 源间切换"></a>nrm 是一个 NPM 源管理器，允许你快速地在如下 NPM 源间切换</h4><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g nrm</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>列出可选的源,带 * 的是当前使用的源，上面的输出表明当前源是官方源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure></p><p>切换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure><p>增加、删除源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nrm add  &lt;registry&gt; &lt;url&gt; [home]//增加</span><br><span class="line">nrm del &lt;registry&gt;//删除</span><br></pre></td></tr></table></figure></p><p>测试速度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nrm test npm//测试指定源</span><br><span class="line">nrm test//测试所有源的响应时间</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux scp命令</title>
      <link href="/2017/06/03/2017-06-03-linux_scp/"/>
      <url>/2017/06/03/2017-06-03-linux_scp/</url>
      
        <content type="html"><![CDATA[<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp [-1246BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file]</span><br><span class="line">[-l limit] [-o ssh_option] [-P port] [-S program]</span><br><span class="line">[[user@]host1:]file1 [...] [[user@]host2:]file2</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp [可选参数] file_source file_target</span><br></pre></td></tr></table></figure><ul><li>-1： 强制scp命令使用协议ssh1</li><li>-2： 强制scp命令使用协议ssh2</li><li>-4： 强制scp命令只使用IPv4寻址</li><li>-6： 强制scp命令只使用IPv6寻址</li><li>-B： 使用批处理模式（传输过程中不询问传输口令或短语）</li><li>-C： 允许压缩。（将* -C标志传递给ssh，从而打开压缩功能）</li><li>-p：保留原文件的修改时间，访问时间和访问权限。</li><li>-q： 不显示传输进度条。</li><li>-r： 递归复制整个目录。</li><li>-v：详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</li><li>-c cipher： 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</li><li>-F ssh_config： 指定一个替代的ssh配置文件，此参数直接传递给ssh。</li><li>-i identity_file： 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</li><li>-l limit： 限定用户所能使用的带宽，以Kbit/s为单位。</li><li>-o ssh_option： 如果习惯于使用ssh_config(5)中的参数传递方式，</li><li>-P port：注意是大写的P, port是指定数据传输用到的端口号</li><li>-S program： 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</li></ul><h4 id="从本地复制到远程"><a href="#从本地复制到远程" class="headerlink" title="从本地复制到远程"></a>从本地复制到远程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp local_file remote_username@remote_ip:remote_folder</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp local_file remote_username@remote_ip:remote_file</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp local_file remote_ip:remote_folder</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp local_file remote_ip:remote_file</span><br></pre></td></tr></table></figure></p><h4 id="复制目录命令格式"><a href="#复制目录命令格式" class="headerlink" title="复制目录命令格式"></a>复制目录命令格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r local_folder remote_username@remote_ip:remote_folder</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r local_folder remote_ip:remote_folder</span><br></pre></td></tr></table></figure></p><h4 id="从远程复制到本地"><a href="#从远程复制到本地" class="headerlink" title="从远程复制到本地"></a>从远程复制到本地</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp root@blog.ibfpig.top:/home/root/others/music /home/space/music/1.mp3 </span><br><span class="line">scp -r blog.ibfpig.top:/home/root/others/ /home/space/music/</span><br></pre></td></tr></table></figure><h4 id="scp命令使用端口号-4588"><a href="#scp命令使用端口号-4588" class="headerlink" title="scp命令使用端口号 4588"></a>scp命令使用端口号 4588</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -p 4588 remote@blog.ibfpig.top:/usr/local/sin.sh /home/administrator</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> scp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 安装安全狗的时候提示lspci</title>
      <link href="/2017/05/31/2017-05-31-lspci/"/>
      <url>/2017/05/31/2017-05-31-lspci/</url>
      
        <content type="html"><![CDATA[<h2 id="lspci缺失"><a href="#lspci缺失" class="headerlink" title="lspci缺失"></a>lspci缺失</h2><h4 id="安装安全狗的时候提示lspci没有，特此记录"><a href="#安装安全狗的时候提示lspci没有，特此记录" class="headerlink" title="安装安全狗的时候提示lspci没有，特此记录"></a>安装安全狗的时候提示lspci没有，特此记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install pciutils</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> lspci </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian安装『BeEF xss』</title>
      <link href="/2015/12/12/2015-12-12-install-beef/"/>
      <url>/2015/12/12/2015-12-12-install-beef/</url>
      
        <content type="html"><![CDATA[<p>　　在BeEF的<a href="https://github.com/beefproject/beef/wiki" target="_blank" rel="noopener">wiki</a>上,安装的方法写的很详细，按照上面的方法来操作就可以~但是，前提是你得系统不受到我们亲爱的长城防火墙的影响，现在分享下我的安装过程~</p><p>1、安装『git』和『curl』</p><pre><code>apt-get updateapt-get install curl git</code></pre><p>2、安装rvm，通过rvm来安装ruby</p><h6 id="提醒：安装rvm和ruby的时候不要用root账户"><a href="#提醒：安装rvm和ruby的时候不要用root账户" class="headerlink" title="提醒：安装rvm和ruby的时候不要用root账户"></a>提醒：安装rvm和ruby的时候不要用root账户</h6><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash -s stable//安装rvm</span><br><span class="line">source ~/.rvm/scripts/rvm//激活rvm</span><br><span class="line">rvm install 2.1.5//安装ruby 2.1.5版本</span><br><span class="line">rvm use 2.1.5 -- default//设置2.1.5为默认版本</span><br><span class="line">```</span><br><span class="line">接着，我们就要安装bundler，但是蛋疼的问题就在这里,因为我们有伟大的长城~~</span><br><span class="line"></span><br><span class="line">###### 在此感谢马云，谢谢淘宝提供的[ruby国内镜像](https://ruby.taobao.org/)</span><br><span class="line"></span><br><span class="line">我们现在来替换官方镜像</span><br></pre></td></tr></table></figure><p>gem sources –add <a href="https://ruby.taobao.org/" target="_blank" rel="noopener">https://ruby.taobao.org/</a> –remove <a href="https://rubygems.org/" target="_blank" rel="noopener">https://rubygems.org/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">来看下是否替换成功~</span><br></pre></td></tr></table></figure></p><p>gem sources -l<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果如下显示成功~~</span><br></pre></td></tr></table></figure></p><p><strong><em> CURRENT SOURCES </em></strong><br><a href="https://ruby.taobao.org/" target="_blank" rel="noopener">https://ruby.taobao.org/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">现在来通过gem安装 bundler</span><br></pre></td></tr></table></figure></p><p>gem install bundler<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3、下载BeEF XSS</span><br></pre></td></tr></table></figure></p><p>git clone git://github.com/beefproject/beef.git /你要安装的目录/beef<br>cd beef<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在beef目录下，有个Gemfile的文件</span><br><span class="line"></span><br><span class="line">vi编辑器打开他~~</span><br></pre></td></tr></table></figure></p><p>vi Gemfile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">替换文件里ruby的官方网址为</span><br></pre></td></tr></table></figure></p><p><a href="https://ruby.taobao.org/" target="_blank" rel="noopener">https://ruby.taobao.org/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">保存退出，接着</span><br></pre></td></tr></table></figure></p><p>bundle install<br>ruby beef<br><code>`</code><br>至此，全部安装完成!</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> 安全 </category>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 安全 </tag>
            
            <tag> BeEF </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian安装『SQLmap』</title>
      <link href="/2015/12/12/2015-12-12-install-sqlmap/"/>
      <url>/2015/12/12/2015-12-12-install-sqlmap/</url>
      
        <content type="html"><![CDATA[<h6 id="1、安装git"><a href="#1、安装git" class="headerlink" title="1、安装git"></a>1、安装git</h6><pre><code>apt-get install git </code></pre><h6 id="2、从github上克隆sqlmap到本地"><a href="#2、从github上克隆sqlmap到本地" class="headerlink" title="2、从github上克隆sqlmap到本地"></a>2、从github上克隆sqlmap到本地</h6><p>github提供了两种地址，SSL和SSH，都可以使用，建议使用git~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">地址1：</span><br><span class="line">https://github.com/sqlmapproject/sqlmap.git</span><br><span class="line">地址2：</span><br><span class="line">git@github.com:sqlmapproject/sqlmap.git</span><br></pre></td></tr></table></figure><p>克隆命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:sqlmapproject/sqlmap.git /你要放sqlmap的目录路径</span><br></pre></td></tr></table></figure><a id="more"></a><p>OK，搞定，安装完了，试试先~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /sqlmap的目录</span><br><span class="line">./sqlmap.py -h</span><br></pre></td></tr></table></figure><p>不过这样的话，每次运行都要cd到sqlmap的目录下，稍稍有些麻烦~</p><h6 id="3、建立快捷方式"><a href="#3、建立快捷方式" class="headerlink" title="3、建立快捷方式~"></a>3、建立快捷方式~</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /sqlmap路径/sqlmap.py /usr/bin/sqlmap</span><br></pre></td></tr></table></figure><p>现在试下任意目录运行sqlmap吧~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -h</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> 安全 </category>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> SQLmap </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派vim代码高亮</title>
      <link href="/2015/12/07/2015-12-07-rpi-vim/"/>
      <url>/2015/12/07/2015-12-07-rpi-vim/</url>
      
        <content type="html"><![CDATA[<p>默认树莓派没有安装vim，执行下面命令安装之</p><pre><code>sudo apt-get install -y vim</code></pre><p>安装好之后就可以使用vi或者vim进行编辑操作，但是没有代码高亮显示。</p><a id="more"></a><p>在<code>~</code>目录下面新建.vimrc文件可以实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi ~ $ cd ~</span><br><span class="line">pi@raspberrypi ~ $ vim .vimrc</span><br></pre></td></tr></table></figure></p><p>在.vimrc文件中插入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set nu</span><br><span class="line">syntax on</span><br><span class="line">set tabstop=4</span><br></pre></td></tr></table></figure><p>再试试vim，看看是不是就有代码高亮了呢~</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 树莓派 </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[玩转树莓派]1、系统安装</title>
      <link href="/2015/12/01/2015-12-01-raspberry-pi-course1/"/>
      <url>/2015/12/01/2015-12-01-raspberry-pi-course1/</url>
      
        <content type="html"><![CDATA[<h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><p>本篇我们主要介绍的是树莓派的系统烧录方法。</p><h5 id="一-使用硬件"><a href="#一-使用硬件" class="headerlink" title="一.使用硬件"></a>一.使用硬件</h5><p>1.16G 高速SD卡</p><p>2.USB 读卡器</p><p>3.电脑<br><a id="more"></a></p><h5 id="二-使用软件"><a href="#二-使用软件" class="headerlink" title="二.使用软件"></a>二.使用软件</h5><p>1.<a href="http://sourceforge.net/projects/win32diskimager/" target="_blank" rel="noopener">树莓派系统烧录软件：Win32 Disk Imager</a></p><p>2.<a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">官方树莓派控制器的系统文件，下载的系统为下图中的系统</a></p><p><a href="">aa</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD语法</title>
      <link href="/2000/01/01/0000-00-00-md/"/>
      <url>/2000/01/01/0000-00-00-md/</url>
      
        <content type="html"><![CDATA[<p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p><ul><li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li><li><strong>得心应手</strong> ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web；</li><li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li></ul><hr><p>[TOC]</p><h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.example.com" target="_blank" rel="noopener">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Cmd + /</code>查看帮助。 </p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th style="text-align:left">Item</th><th style="text-align:right">Value</th><th style="text-align:center">Qty</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">1600 USD</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">12 USD</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">1 USD</td><td style="text-align:center">234</td></tr></tbody></table><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">e=&gt;end</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>以及时序图:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>使用 <code>- [ ]</code> 和 <code>- [x]</code> 语法可以创建复选框，实现 todo-list 等功能。例如：</p><ul><li style="list-style: none"><input type="checkbox" checked> 已完成事项</li><li style="list-style: none"><input type="checkbox"> 待办事项1</li><li style="list-style: none"><input type="checkbox"> 待办事项2</li></ul><blockquote><p><strong>注意：</strong>目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在<strong>马克飞象</strong>中修改 Markdown 原文才可生效。下个版本将会全面支持。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
